/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuditLog', 'model/PageAuditLog'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuditLog'), require('../model/PageAuditLog'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.AuditLogApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.AuditLog, root.HydrogenNucleusApi.PageAuditLog);
  }
}(this, function(ApiClient, AuditLog, PageAuditLog) {
  'use strict';

  /**
   * AuditLog service.
   * @module api/AuditLogApi
   * @version 1.7.0
   */

  /**
   * Constructs a new AuditLogApi. 
   * @alias module:api/AuditLogApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAuditLogUsingPost operation.
     * @callback module:api/AuditLogApi~createAuditLogUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a audit log
     * Create a new audit log.
     * @param {module:model/AuditLog} auditLog auditLog
     * @param {module:api/AuditLogApi~createAuditLogUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditLog}
     */
    this.createAuditLogUsingPost = function(auditLog, callback) {
      var postBody = auditLog;

      // verify the required parameter 'auditLog' is set
      if (auditLog === undefined || auditLog === null) {
        throw new Error("Missing the required parameter 'auditLog' when calling createAuditLogUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AuditLog;

      return this.apiClient.callApi(
        '/audit_log', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuditLogAllUsingGet operation.
     * @callback module:api/AuditLogApi~getAuditLogAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAuditLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all audit log
     * Get details for all audit log.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AuditLogApi~getAuditLogAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAuditLog}
     */
    this.getAuditLogAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAuditLog;

      return this.apiClient.callApi(
        '/audit_log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuditLogUsingGet operation.
     * @callback module:api/AuditLogApi~getAuditLogUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a audit log
     * Retrieve the information for a audit log.
     * @param {String} auditLogId UUID audit_log_id
     * @param {module:api/AuditLogApi~getAuditLogUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditLog}
     */
    this.getAuditLogUsingGet = function(auditLogId, callback) {
      var postBody = null;

      // verify the required parameter 'auditLogId' is set
      if (auditLogId === undefined || auditLogId === null) {
        throw new Error("Missing the required parameter 'auditLogId' when calling getAuditLogUsingGet");
      }


      var pathParams = {
        'audit_log_id': auditLogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AuditLog;

      return this.apiClient.callApi(
        '/audit_log/{audit_log_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
