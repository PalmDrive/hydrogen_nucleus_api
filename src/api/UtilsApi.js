/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountStatus', 'model/PageAccountStatus', 'model/PageStage', 'model/PageTransactionCode', 'model/Stage', 'model/TransactionCode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountStatus'), require('../model/PageAccountStatus'), require('../model/PageStage'), require('../model/PageTransactionCode'), require('../model/Stage'), require('../model/TransactionCode'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.UtilsApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.AccountStatus, root.HydrogenNucleusApi.PageAccountStatus, root.HydrogenNucleusApi.PageStage, root.HydrogenNucleusApi.PageTransactionCode, root.HydrogenNucleusApi.Stage, root.HydrogenNucleusApi.TransactionCode);
  }
}(this, function(ApiClient, AccountStatus, PageAccountStatus, PageStage, PageTransactionCode, Stage, TransactionCode) {
  'use strict';

  /**
   * Utils service.
   * @module api/UtilsApi
   * @version 1.7.0
   */

  /**
   * Constructs a new UtilsApi. 
   * @alias module:api/UtilsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAccountStatusUsingPost operation.
     * @callback module:api/UtilsApi~createAccountStatusUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account status
     * Create an account status record for an account.
     * @param {module:model/AccountStatus} accountStatusRequest accountStatusRequest
     * @param {module:api/UtilsApi~createAccountStatusUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountStatus}
     */
    this.createAccountStatusUsingPost = function(accountStatusRequest, callback) {
      var postBody = accountStatusRequest;

      // verify the required parameter 'accountStatusRequest' is set
      if (accountStatusRequest === undefined || accountStatusRequest === null) {
        throw new Error("Missing the required parameter 'accountStatusRequest' when calling createAccountStatusUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AccountStatus;

      return this.apiClient.callApi(
        '/account_status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createStageUsingPost operation.
     * @callback module:api/UtilsApi~createStageUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account stage
     * Create a new account stage
     * @param {module:model/Stage} stageRequest stageRequest
     * @param {module:api/UtilsApi~createStageUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stage}
     */
    this.createStageUsingPost = function(stageRequest, callback) {
      var postBody = stageRequest;

      // verify the required parameter 'stageRequest' is set
      if (stageRequest === undefined || stageRequest === null) {
        throw new Error("Missing the required parameter 'stageRequest' when calling createStageUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Stage;

      return this.apiClient.callApi(
        '/stage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTransactionCodeUsingPost operation.
     * @callback module:api/UtilsApi~createTransactionCodeUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transaction code
     * Create a new transaction code for your firm.
     * @param {module:model/TransactionCode} transactionRequest transactionRequest
     * @param {module:api/UtilsApi~createTransactionCodeUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionCode}
     */
    this.createTransactionCodeUsingPost = function(transactionRequest, callback) {
      var postBody = transactionRequest;

      // verify the required parameter 'transactionRequest' is set
      if (transactionRequest === undefined || transactionRequest === null) {
        throw new Error("Missing the required parameter 'transactionRequest' when calling createTransactionCodeUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TransactionCode;

      return this.apiClient.callApi(
        '/transaction_code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountStatusUsingDelete operation.
     * @callback module:api/UtilsApi~deleteAccountStatusUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account status
     * Permanently delete an account status record from an accountâ€™s history.
     * @param {String} accountStatusId UUID account_status_id
     * @param {module:api/UtilsApi~deleteAccountStatusUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountStatusUsingDelete = function(accountStatusId, callback) {
      var postBody = null;

      // verify the required parameter 'accountStatusId' is set
      if (accountStatusId === undefined || accountStatusId === null) {
        throw new Error("Missing the required parameter 'accountStatusId' when calling deleteAccountStatusUsingDelete");
      }


      var pathParams = {
        'account_status_id': accountStatusId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/account_status/{account_status_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStageUsingDelete operation.
     * @callback module:api/UtilsApi~deleteStageUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account stage
     * Permanently delete an account stage.
     * @param {String} stageId UUID stage_id
     * @param {module:api/UtilsApi~deleteStageUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteStageUsingDelete = function(stageId, callback) {
      var postBody = null;

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling deleteStageUsingDelete");
      }


      var pathParams = {
        'stage_id': stageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/stage/{stage_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransactionCodeUsingDelete operation.
     * @callback module:api/UtilsApi~deleteTransactionCodeUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transaction code
     * Permanently delete a transaction code for your firm.
     * @param {String} transactionCodeId UUID transaction_code_id
     * @param {module:api/UtilsApi~deleteTransactionCodeUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTransactionCodeUsingDelete = function(transactionCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'transactionCodeId' is set
      if (transactionCodeId === undefined || transactionCodeId === null) {
        throw new Error("Missing the required parameter 'transactionCodeId' when calling deleteTransactionCodeUsingDelete");
      }


      var pathParams = {
        'transaction_code_id': transactionCodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/transaction_code/{transaction_code_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountStatusAllUsingGet operation.
     * @callback module:api/UtilsApi~getAccountStatusAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAccountStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account statuses
     * Get the account status history information for all accounts.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getAccountStatusAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAccountStatus}
     */
    this.getAccountStatusAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAccountStatus;

      return this.apiClient.callApi(
        '/account_status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountStatusUsingGet operation.
     * @callback module:api/UtilsApi~getAccountStatusUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account status
     * Retrieve the information for a specific account status record for an account.
     * @param {String} accountStatusId UUID account_status_id
     * @param {module:api/UtilsApi~getAccountStatusUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountStatus}
     */
    this.getAccountStatusUsingGet = function(accountStatusId, callback) {
      var postBody = null;

      // verify the required parameter 'accountStatusId' is set
      if (accountStatusId === undefined || accountStatusId === null) {
        throw new Error("Missing the required parameter 'accountStatusId' when calling getAccountStatusUsingGet");
      }


      var pathParams = {
        'account_status_id': accountStatusId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AccountStatus;

      return this.apiClient.callApi(
        '/account_status/{account_status_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStageAllUsingGet operation.
     * @callback module:api/UtilsApi~getStageAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageStage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account stages
     * Get the information for all possible account stages.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getStageAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageStage}
     */
    this.getStageAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageStage;

      return this.apiClient.callApi(
        '/stage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStageUsingGet operation.
     * @callback module:api/UtilsApi~getStageUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account stage
     * Retrieve the information for a specific account stage.
     * @param {String} stageId UUID stage_id
     * @param {module:api/UtilsApi~getStageUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stage}
     */
    this.getStageUsingGet = function(stageId, callback) {
      var postBody = null;

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling getStageUsingGet");
      }


      var pathParams = {
        'stage_id': stageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Stage;

      return this.apiClient.callApi(
        '/stage/{stage_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionCodeAllUsingGet operation.
     * @callback module:api/UtilsApi~getTransactionCodeAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageTransactionCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all transaction codes
     * Get the information for all transaction codes defined by your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getTransactionCodeAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageTransactionCode}
     */
    this.getTransactionCodeAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageTransactionCode;

      return this.apiClient.callApi(
        '/transaction_code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionCodeUsingGet operation.
     * @callback module:api/UtilsApi~getTransactionCodeUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a transaction code
     * Retrieve the information for a transaction code defined by your firm.
     * @param {String} transactionCodeId UUID transaction_code_id
     * @param {module:api/UtilsApi~getTransactionCodeUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionCode}
     */
    this.getTransactionCodeUsingGet = function(transactionCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'transactionCodeId' is set
      if (transactionCodeId === undefined || transactionCodeId === null) {
        throw new Error("Missing the required parameter 'transactionCodeId' when calling getTransactionCodeUsingGet");
      }


      var pathParams = {
        'transaction_code_id': transactionCodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = TransactionCode;

      return this.apiClient.callApi(
        '/transaction_code/{transaction_code_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountStatusUsingPut operation.
     * @callback module:api/UtilsApi~updateAccountStatusUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account status
     * Update an account status record for an account.
     * @param {module:model/AccountStatus} accountStatus account_status
     * @param {String} accountStatusId UUID account_status_id
     * @param {module:api/UtilsApi~updateAccountStatusUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountStatus}
     */
    this.updateAccountStatusUsingPut = function(accountStatus, accountStatusId, callback) {
      var postBody = accountStatus;

      // verify the required parameter 'accountStatus' is set
      if (accountStatus === undefined || accountStatus === null) {
        throw new Error("Missing the required parameter 'accountStatus' when calling updateAccountStatusUsingPut");
      }

      // verify the required parameter 'accountStatusId' is set
      if (accountStatusId === undefined || accountStatusId === null) {
        throw new Error("Missing the required parameter 'accountStatusId' when calling updateAccountStatusUsingPut");
      }


      var pathParams = {
        'account_status_id': accountStatusId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AccountStatus;

      return this.apiClient.callApi(
        '/account_status/{account_status_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStageUsingPut operation.
     * @callback module:api/UtilsApi~updateStageUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account stage
     * Update the information for an account stage.
     * @param {module:model/Stage} stage stage
     * @param {String} stageId UUID stage_id
     * @param {module:api/UtilsApi~updateStageUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stage}
     */
    this.updateStageUsingPut = function(stage, stageId, callback) {
      var postBody = stage;

      // verify the required parameter 'stage' is set
      if (stage === undefined || stage === null) {
        throw new Error("Missing the required parameter 'stage' when calling updateStageUsingPut");
      }

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling updateStageUsingPut");
      }


      var pathParams = {
        'stage_id': stageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Stage;

      return this.apiClient.callApi(
        '/stage/{stage_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransactionCodeUsingPut operation.
     * @callback module:api/UtilsApi~updateTransactionCodeUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a transaction code
     * Update a transaction code for your firm.
     * @param {module:model/TransactionCode} transactionCode transaction_code
     * @param {String} transactionCodeId UUID transaction_code_id
     * @param {module:api/UtilsApi~updateTransactionCodeUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionCode}
     */
    this.updateTransactionCodeUsingPut = function(transactionCode, transactionCodeId, callback) {
      var postBody = transactionCode;

      // verify the required parameter 'transactionCode' is set
      if (transactionCode === undefined || transactionCode === null) {
        throw new Error("Missing the required parameter 'transactionCode' when calling updateTransactionCodeUsingPut");
      }

      // verify the required parameter 'transactionCodeId' is set
      if (transactionCodeId === undefined || transactionCodeId === null) {
        throw new Error("Missing the required parameter 'transactionCodeId' when calling updateTransactionCodeUsingPut");
      }


      var pathParams = {
        'transaction_code_id': transactionCodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TransactionCode;

      return this.apiClient.callApi(
        '/transaction_code/{transaction_code_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
