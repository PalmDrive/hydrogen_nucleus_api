/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Account', 'model/AccountAllocationMapping', 'model/AccountOverviewVO', 'model/AccountPermissionVO', 'model/AccountType', 'model/AclClientPermissionVO', 'model/AvailableDateDoubleVO', 'model/PageAccount', 'model/PageAccountAllocationMapping', 'model/PageAccountPermissionVO', 'model/PageAccountType', 'model/PagePortfolioTransaction', 'model/PageVAccountAssetSize', 'model/Portfolio', 'model/PortfolioHoldingAgg'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Account'), require('../model/AccountAllocationMapping'), require('../model/AccountOverviewVO'), require('../model/AccountPermissionVO'), require('../model/AccountType'), require('../model/AclClientPermissionVO'), require('../model/AvailableDateDoubleVO'), require('../model/PageAccount'), require('../model/PageAccountAllocationMapping'), require('../model/PageAccountPermissionVO'), require('../model/PageAccountType'), require('../model/PagePortfolioTransaction'), require('../model/PageVAccountAssetSize'), require('../model/Portfolio'), require('../model/PortfolioHoldingAgg'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.AccountApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.Account, root.HydrogenNucleusApi.AccountAllocationMapping, root.HydrogenNucleusApi.AccountOverviewVO, root.HydrogenNucleusApi.AccountPermissionVO, root.HydrogenNucleusApi.AccountType, root.HydrogenNucleusApi.AclClientPermissionVO, root.HydrogenNucleusApi.AvailableDateDoubleVO, root.HydrogenNucleusApi.PageAccount, root.HydrogenNucleusApi.PageAccountAllocationMapping, root.HydrogenNucleusApi.PageAccountPermissionVO, root.HydrogenNucleusApi.PageAccountType, root.HydrogenNucleusApi.PagePortfolioTransaction, root.HydrogenNucleusApi.PageVAccountAssetSize, root.HydrogenNucleusApi.Portfolio, root.HydrogenNucleusApi.PortfolioHoldingAgg);
  }
}(this, function(ApiClient, Account, AccountAllocationMapping, AccountOverviewVO, AccountPermissionVO, AccountType, AclClientPermissionVO, AvailableDateDoubleVO, PageAccount, PageAccountAllocationMapping, PageAccountPermissionVO, PageAccountType, PagePortfolioTransaction, PageVAccountAssetSize, Portfolio, PortfolioHoldingAgg) {
  'use strict';

  /**
   * Account service.
   * @module api/AccountApi
   * @version 1.7.0
   */

  /**
   * Constructs a new AccountApi. 
   * @alias module:api/AccountApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAccountAllocationMappingUsingPost operation.
     * @callback module:api/AccountApi~createAccountAllocationMappingUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountAllocationMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account allocation
     * Create an account-allocation mapping for an account.
     * @param {module:model/AccountAllocationMapping} allocRequest allocRequest
     * @param {module:api/AccountApi~createAccountAllocationMappingUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountAllocationMapping}
     */
    this.createAccountAllocationMappingUsingPost = function(allocRequest, callback) {
      var postBody = allocRequest;

      // verify the required parameter 'allocRequest' is set
      if (allocRequest === undefined || allocRequest === null) {
        throw new Error("Missing the required parameter 'allocRequest' when calling createAccountAllocationMappingUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AccountAllocationMapping;

      return this.apiClient.callApi(
        '/account_allocation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountTypeUsingPost operation.
     * @callback module:api/AccountApi~createAccountTypeUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account type
     * Create a new account type for your firm.
     * @param {module:model/AccountType} accountTypeRequest accountTypeRequest
     * @param {module:api/AccountApi~createAccountTypeUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountType}
     */
    this.createAccountTypeUsingPost = function(accountTypeRequest, callback) {
      var postBody = accountTypeRequest;

      // verify the required parameter 'accountTypeRequest' is set
      if (accountTypeRequest === undefined || accountTypeRequest === null) {
        throw new Error("Missing the required parameter 'accountTypeRequest' when calling createAccountTypeUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AccountType;

      return this.apiClient.callApi(
        '/account_type', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountUsingPost operation.
     * @callback module:api/AccountApi~createAccountUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account
     * Create an account under a client.
     * @param {module:model/Account} clientAccountRequest clientAccountRequest
     * @param {module:api/AccountApi~createAccountUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    this.createAccountUsingPost = function(clientAccountRequest, callback) {
      var postBody = clientAccountRequest;

      // verify the required parameter 'clientAccountRequest' is set
      if (clientAccountRequest === undefined || clientAccountRequest === null) {
        throw new Error("Missing the required parameter 'clientAccountRequest' when calling createAccountUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountAllocationMappingUsingDelete operation.
     * @callback module:api/AccountApi~deleteAccountAllocationMappingUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account allocation
     * Permanently delete an account-allocation mapping for an account.
     * @param {String} accountAllocationId UUID account_allocation_id
     * @param {module:api/AccountApi~deleteAccountAllocationMappingUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountAllocationMappingUsingDelete = function(accountAllocationId, callback) {
      var postBody = null;

      // verify the required parameter 'accountAllocationId' is set
      if (accountAllocationId === undefined || accountAllocationId === null) {
        throw new Error("Missing the required parameter 'accountAllocationId' when calling deleteAccountAllocationMappingUsingDelete");
      }


      var pathParams = {
        'account_allocation_id': accountAllocationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/account_allocation/{account_allocation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountPermissionUsingDELETE operation.
     * @callback module:api/AccountApi~deleteAccountPermissionUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountPermissionVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account permission
     * Delete an account permission
     * @param {String} accountId account_id
     * @param {module:api/AccountApi~deleteAccountPermissionUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountPermissionVO}
     */
    this.deleteAccountPermissionUsingDELETE = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteAccountPermissionUsingDELETE");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AccountPermissionVO;

      return this.apiClient.callApi(
        '/account_permission/{account_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountTypeUsingDelete operation.
     * @callback module:api/AccountApi~deleteAccountTypeUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account type
     * Permanently delete a possible account type defined for your firm.
     * @param {String} accountTypeId UUID account_type_id
     * @param {String} accountTypeId2 account_type_id
     * @param {module:api/AccountApi~deleteAccountTypeUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountTypeUsingDelete = function(accountTypeId, accountTypeId2, callback) {
      var postBody = null;

      // verify the required parameter 'accountTypeId' is set
      if (accountTypeId === undefined || accountTypeId === null) {
        throw new Error("Missing the required parameter 'accountTypeId' when calling deleteAccountTypeUsingDelete");
      }

      // verify the required parameter 'accountTypeId2' is set
      if (accountTypeId2 === undefined || accountTypeId2 === null) {
        throw new Error("Missing the required parameter 'accountTypeId2' when calling deleteAccountTypeUsingDelete");
      }


      var pathParams = {
        'accountTypeId': accountTypeId,
        'account_type_id': accountTypeId2
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/account_type/{account_type_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountUsingDelete operation.
     * @callback module:api/AccountApi~deleteAccountUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account
     * Permanently delete an account under a client.
     * @param {String} accountId UUID account_id
     * @param {module:api/AccountApi~deleteAccountUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountUsingDelete = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteAccountUsingDelete");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/account/{account_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAllUsingGet operation.
     * @callback module:api/AccountApi~getAccountAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all accounts
     * Get information for all accounts for all clients defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AccountApi~getAccountAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAccount}
     */
    this.getAccountAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAccount;

      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAllocationMappingAllUsingGet operation.
     * @callback module:api/AccountApi~getAccountAllocationMappingAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAccountAllocationMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account allocations
     * Get information for all account-allocation mappings for all accounts defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AccountApi~getAccountAllocationMappingAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAccountAllocationMapping}
     */
    this.getAccountAllocationMappingAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAccountAllocationMapping;

      return this.apiClient.callApi(
        '/account_allocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAllocationMappingUsingGet operation.
     * @callback module:api/AccountApi~getAccountAllocationMappingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountAllocationMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account allocation
     * Retrieve the information for a specific account-allocation mapping for an account.
     * @param {String} accountAllocationId UUID account_allocation_id
     * @param {module:api/AccountApi~getAccountAllocationMappingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountAllocationMapping}
     */
    this.getAccountAllocationMappingUsingGet = function(accountAllocationId, callback) {
      var postBody = null;

      // verify the required parameter 'accountAllocationId' is set
      if (accountAllocationId === undefined || accountAllocationId === null) {
        throw new Error("Missing the required parameter 'accountAllocationId' when calling getAccountAllocationMappingUsingGet");
      }


      var pathParams = {
        'account_allocation_id': accountAllocationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AccountAllocationMapping;

      return this.apiClient.callApi(
        '/account_allocation/{account_allocation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAssetSizeAggAllUsingGet operation.
     * @callback module:api/AccountApi~getAccountAssetSizeAggAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailableDateDoubleVO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account asset sizes
     * Get a list of asset sizes by date for an account.
     * @param {String} accountId Account Id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endDate end date
     * @param {Boolean} opts.excludeSubledger exclude_subledger (default to false)
     * @param {Boolean} opts.getLatest true or false
     * @param {String} opts.sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in ()
     * @param {Date} opts.startDate start date
     * @param {module:api/AccountApi~getAccountAssetSizeAggAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailableDateDoubleVO>}
     */
    this.getAccountAssetSizeAggAllUsingGet = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountAssetSizeAggAllUsingGet");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
        'end_date': opts['endDate'],
        'exclude_subledger': opts['excludeSubledger'],
        'get_latest': opts['getLatest'],
        'sort_type': opts['sortType'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [AvailableDateDoubleVO];

      return this.apiClient.callApi(
        '/account/{account_id}/asset_size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAssetSizeAllUsingGet operation.
     * @callback module:api/AccountApi~getAccountAssetSizeAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageVAccountAssetSize} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account asset sizes
     * Get information for all account asset sizes
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AccountApi~getAccountAssetSizeAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageVAccountAssetSize}
     */
    this.getAccountAssetSizeAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageVAccountAssetSize;

      return this.apiClient.callApi(
        '/account_asset_size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountOverviewUsingGet operation.
     * @callback module:api/AccountApi~getAccountOverviewUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountOverviewVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Account overview
     * @param {String} accountId UUID account_id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {module:api/AccountApi~getAccountOverviewUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountOverviewVO}
     */
    this.getAccountOverviewUsingGet = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountOverviewUsingGet");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'order_by': opts['orderBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AccountOverviewVO;

      return this.apiClient.callApi(
        '/account/{account_id}/account_overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountPermissionUsingGET operation.
     * @callback module:api/AccountApi~getAccountPermissionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountPermissionVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an account permission
     * Get an account permission
     * @param {String} accountId account_id
     * @param {module:api/AccountApi~getAccountPermissionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountPermissionVO}
     */
    this.getAccountPermissionUsingGET = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountPermissionUsingGET");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AccountPermissionVO;

      return this.apiClient.callApi(
        '/account_permission/{account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountTypeAllUsingGet operation.
     * @callback module:api/AccountApi~getAccountTypeAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAccountType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account types
     * List all account types defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AccountApi~getAccountTypeAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAccountType}
     */
    this.getAccountTypeAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAccountType;

      return this.apiClient.callApi(
        '/account_type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountTypeUsingGet operation.
     * @callback module:api/AccountApi~getAccountTypeUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Account Type
     * Get an account types defined for your firm.
     * @param {String} accountTypeId UUID account_type_id
     * @param {String} accountTypeId2 account_type_id
     * @param {module:api/AccountApi~getAccountTypeUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountType}
     */
    this.getAccountTypeUsingGet = function(accountTypeId, accountTypeId2, callback) {
      var postBody = null;

      // verify the required parameter 'accountTypeId' is set
      if (accountTypeId === undefined || accountTypeId === null) {
        throw new Error("Missing the required parameter 'accountTypeId' when calling getAccountTypeUsingGet");
      }

      // verify the required parameter 'accountTypeId2' is set
      if (accountTypeId2 === undefined || accountTypeId2 === null) {
        throw new Error("Missing the required parameter 'accountTypeId2' when calling getAccountTypeUsingGet");
      }


      var pathParams = {
        'accountTypeId': accountTypeId,
        'account_type_id': accountTypeId2
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AccountType;

      return this.apiClient.callApi(
        '/account_type/{account_type_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountUsingGet operation.
     * @callback module:api/AccountApi~getAccountUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account
     * Retrieve the information for a specific account associated with a client.
     * @param {String} accountId UUID account_id
     * @param {module:api/AccountApi~getAccountUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    this.getAccountUsingGet = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountUsingGet");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/account/{account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAccountPermissionUsingGET operation.
     * @callback module:api/AccountApi~getAllAccountPermissionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAccountPermissionVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account permission
     * List all account permission
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AccountApi~getAllAccountPermissionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAccountPermissionVO}
     */
    this.getAllAccountPermissionUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAccountPermissionVO;

      return this.apiClient.callApi(
        '/account_permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioHoldingAggAllUsingGet operation.
     * @callback module:api/AccountApi~getPortfolioHoldingAggAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortfolioHoldingAgg>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account holdings
     * Get information for all the securities that are currently being held by an account.
     * @param {String} accountId UUID account_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.endDate end date 
     * @param {Boolean} opts.getLatest true or false
     * @param {String} opts.startDate start date 
     * @param {module:api/AccountApi~getPortfolioHoldingAggAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortfolioHoldingAgg>}
     */
    this.getPortfolioHoldingAggAllUsingGet = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPortfolioHoldingAggAllUsingGet");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
        'end_date': opts['endDate'],
        'get_latest': opts['getLatest'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [PortfolioHoldingAgg];

      return this.apiClient.callApi(
        '/account/{account_id}/holding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioTransactionAggAllUsingGet operation.
     * @callback module:api/AccountApi~getPortfolioTransactionAggAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagePortfolioTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account transactions
     * Get the information for all transactions for an account.
     * @param {String} accountId UUID account_id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {Date} opts.endDate end_date (default to null)
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {Date} opts.startDate start_date (default to null)
     * @param {module:api/AccountApi~getPortfolioTransactionAggAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagePortfolioTransaction}
     */
    this.getPortfolioTransactionAggAllUsingGet = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPortfolioTransactionAggAllUsingGet");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'end_date': opts['endDate'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PagePortfolioTransaction;

      return this.apiClient.callApi(
        '/account/{account_id}/transaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertAccountAndRelatedPermissionUsingPOST operation.
     * @callback module:api/AccountApi~insertAccountAndRelatedPermissionUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountPermissionVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an account permission
     * create an account permission
     * @param {module:model/AclClientPermissionVO} aclClientPermissionVO aclClientPermissionVO
     * @param {module:api/AccountApi~insertAccountAndRelatedPermissionUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountPermissionVO}
     */
    this.insertAccountAndRelatedPermissionUsingPOST = function(aclClientPermissionVO, callback) {
      var postBody = aclClientPermissionVO;

      // verify the required parameter 'aclClientPermissionVO' is set
      if (aclClientPermissionVO === undefined || aclClientPermissionVO === null) {
        throw new Error("Missing the required parameter 'aclClientPermissionVO' when calling insertAccountAndRelatedPermissionUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AccountPermissionVO;

      return this.apiClient.callApi(
        '/account_permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeAccountUsingPost operation.
     * @callback module:api/AccountApi~subscribeAccountUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Portfolio>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe an account
     * After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
     * @param {String} accountId UUID account_id
     * @param {module:model/AccountAllocationMapping} allocRequest allocRequest
     * @param {module:api/AccountApi~subscribeAccountUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Portfolio>}
     */
    this.subscribeAccountUsingPost = function(accountId, allocRequest, callback) {
      var postBody = allocRequest;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling subscribeAccountUsingPost");
      }

      // verify the required parameter 'allocRequest' is set
      if (allocRequest === undefined || allocRequest === null) {
        throw new Error("Missing the required parameter 'allocRequest' when calling subscribeAccountUsingPost");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [Portfolio];

      return this.apiClient.callApi(
        '/account/{account_id}/subscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountAllocationMappingUsingPut operation.
     * @callback module:api/AccountApi~updateAccountAllocationMappingUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountAllocationMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account allocation
     * Update the information for an account-allocation mapping.
     * @param {String} accountAllocationId UUID account_allocation_id
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountAllocationMapping} opts.accountAllocationMapping account_allocation_mapping
     * @param {module:api/AccountApi~updateAccountAllocationMappingUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountAllocationMapping}
     */
    this.updateAccountAllocationMappingUsingPut = function(accountAllocationId, opts, callback) {
      opts = opts || {};
      var postBody = opts['accountAllocationMapping'];

      // verify the required parameter 'accountAllocationId' is set
      if (accountAllocationId === undefined || accountAllocationId === null) {
        throw new Error("Missing the required parameter 'accountAllocationId' when calling updateAccountAllocationMappingUsingPut");
      }


      var pathParams = {
        'account_allocation_id': accountAllocationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AccountAllocationMapping;

      return this.apiClient.callApi(
        '/account_allocation/{account_allocation_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountTypeUsingPut operation.
     * @callback module:api/AccountApi~updateAccountTypeUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account type
     * Update the information for a possible account type defined for your firm.
     * @param {module:model/AccountType} accountType account_type
     * @param {String} accountTypeId UUID account_type_id
     * @param {module:api/AccountApi~updateAccountTypeUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountType}
     */
    this.updateAccountTypeUsingPut = function(accountType, accountTypeId, callback) {
      var postBody = accountType;

      // verify the required parameter 'accountType' is set
      if (accountType === undefined || accountType === null) {
        throw new Error("Missing the required parameter 'accountType' when calling updateAccountTypeUsingPut");
      }

      // verify the required parameter 'accountTypeId' is set
      if (accountTypeId === undefined || accountTypeId === null) {
        throw new Error("Missing the required parameter 'accountTypeId' when calling updateAccountTypeUsingPut");
      }


      var pathParams = {
        'account_type_id': accountTypeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AccountType;

      return this.apiClient.callApi(
        '/account_type/{account_type_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountUsingPut operation.
     * @callback module:api/AccountApi~updateAccountUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account
     * Update the information for an account.
     * @param {module:model/Account} account account
     * @param {String} accountId UUID account_id
     * @param {module:api/AccountApi~updateAccountUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    this.updateAccountUsingPut = function(account, accountId, callback) {
      var postBody = account;

      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling updateAccountUsingPut");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateAccountUsingPut");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/account/{account_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientAccountPermissionUsingPUT operation.
     * @callback module:api/AccountApi~updateClientAccountPermissionUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountPermissionVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account permission
     * Update an account permission
     * @param {String} accountId account_id
     * @param {module:model/AclClientPermissionVO} aclClientPermissionVO aclClientPermissionVO
     * @param {module:api/AccountApi~updateClientAccountPermissionUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountPermissionVO}
     */
    this.updateClientAccountPermissionUsingPUT = function(accountId, aclClientPermissionVO, callback) {
      var postBody = aclClientPermissionVO;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateClientAccountPermissionUsingPUT");
      }

      // verify the required parameter 'aclClientPermissionVO' is set
      if (aclClientPermissionVO === undefined || aclClientPermissionVO === null) {
        throw new Error("Missing the required parameter 'aclClientPermissionVO' when calling updateClientAccountPermissionUsingPUT");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AccountPermissionVO;

      return this.apiClient.callApi(
        '/account_permission/{account_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
