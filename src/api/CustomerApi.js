/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Customer', 'model/CustomerRevenue', 'model/PageCustomer', 'model/PageCustomerRevenue'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Customer'), require('../model/CustomerRevenue'), require('../model/PageCustomer'), require('../model/PageCustomerRevenue'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.CustomerApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.Customer, root.HydrogenNucleusApi.CustomerRevenue, root.HydrogenNucleusApi.PageCustomer, root.HydrogenNucleusApi.PageCustomerRevenue);
  }
}(this, function(ApiClient, Customer, CustomerRevenue, PageCustomer, PageCustomerRevenue) {
  'use strict';

  /**
   * Customer service.
   * @module api/CustomerApi
   * @version 1.7.0
   */

  /**
   * Constructs a new CustomerApi. 
   * @alias module:api/CustomerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCustomerRevenueUsingPost operation.
     * @callback module:api/CustomerApi~createCustomerRevenueUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerRevenue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a customer revenue
     * Create a new customer revenue, with your firm.
     * @param {module:model/CustomerRevenue} customerRevenue customerRevenue
     * @param {module:api/CustomerApi~createCustomerRevenueUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerRevenue}
     */
    this.createCustomerRevenueUsingPost = function(customerRevenue, callback) {
      var postBody = customerRevenue;

      // verify the required parameter 'customerRevenue' is set
      if (customerRevenue === undefined || customerRevenue === null) {
        throw new Error("Missing the required parameter 'customerRevenue' when calling createCustomerRevenueUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = CustomerRevenue;

      return this.apiClient.callApi(
        '/customer_revenue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomerUsingPost operation.
     * @callback module:api/CustomerApi~createCustomerUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a customer
     * Create a new customer, with your firm.
     * @param {module:model/Customer} customer customer
     * @param {module:api/CustomerApi~createCustomerUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.createCustomerUsingPost = function(customer, callback) {
      var postBody = customer;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling createCustomerUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerRevenueUsingDelete operation.
     * @callback module:api/CustomerApi~deleteCustomerRevenueUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a customer revenue
     * Delete a customer revenue. 
     * @param {String} customerRevenueId UUID customer_revenue_id
     * @param {module:api/CustomerApi~deleteCustomerRevenueUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomerRevenueUsingDelete = function(customerRevenueId, callback) {
      var postBody = null;

      // verify the required parameter 'customerRevenueId' is set
      if (customerRevenueId === undefined || customerRevenueId === null) {
        throw new Error("Missing the required parameter 'customerRevenueId' when calling deleteCustomerRevenueUsingDelete");
      }


      var pathParams = {
        'customer_revenue_id': customerRevenueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customer_revenue/{customer_revenue_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerUsingDelete operation.
     * @callback module:api/CustomerApi~deleteCustomerUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a customer
     * Delete a customer. 
     * @param {String} customerId UUID customer_id
     * @param {module:api/CustomerApi~deleteCustomerUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomerUsingDelete = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomerUsingDelete");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customer/{customer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerAllUsingGet operation.
     * @callback module:api/CustomerApi~getCustomerAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageCustomer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all customer
     * List all customer. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/CustomerApi~getCustomerAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageCustomer}
     */
    this.getCustomerAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageCustomer;

      return this.apiClient.callApi(
        '/customer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerRevenueAllUsingGet operation.
     * @callback module:api/CustomerApi~getCustomerRevenueAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageCustomerRevenue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all customer revenue
     * List all customer revenue. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/CustomerApi~getCustomerRevenueAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageCustomerRevenue}
     */
    this.getCustomerRevenueAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageCustomerRevenue;

      return this.apiClient.callApi(
        '/customer_revenue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerRevenueUsingGet operation.
     * @callback module:api/CustomerApi~getCustomerRevenueUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerRevenue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a customer revenue
     * Retrieve a customer revenue. 
     * @param {String} customerRevenueId UUID customer_revenue_id
     * @param {module:api/CustomerApi~getCustomerRevenueUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerRevenue}
     */
    this.getCustomerRevenueUsingGet = function(customerRevenueId, callback) {
      var postBody = null;

      // verify the required parameter 'customerRevenueId' is set
      if (customerRevenueId === undefined || customerRevenueId === null) {
        throw new Error("Missing the required parameter 'customerRevenueId' when calling getCustomerRevenueUsingGet");
      }


      var pathParams = {
        'customer_revenue_id': customerRevenueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CustomerRevenue;

      return this.apiClient.callApi(
        '/customer_revenue/{customer_revenue_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerUsingGet operation.
     * @callback module:api/CustomerApi~getCustomerUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a customer
     * Retrieve a customer. 
     * @param {String} customerId UUID customer_id
     * @param {module:api/CustomerApi~getCustomerUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.getCustomerUsingGet = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerUsingGet");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customer/{customer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomerRevenueUsingPut operation.
     * @callback module:api/CustomerApi~updateCustomerRevenueUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerRevenue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a customer revenue
     * Update a customer revenue. 
     * @param {module:model/CustomerRevenue} customerRevenue customer_revenue
     * @param {String} customerRevenueId UUID customer_revenue_id
     * @param {module:api/CustomerApi~updateCustomerRevenueUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerRevenue}
     */
    this.updateCustomerRevenueUsingPut = function(customerRevenue, customerRevenueId, callback) {
      var postBody = customerRevenue;

      // verify the required parameter 'customerRevenue' is set
      if (customerRevenue === undefined || customerRevenue === null) {
        throw new Error("Missing the required parameter 'customerRevenue' when calling updateCustomerRevenueUsingPut");
      }

      // verify the required parameter 'customerRevenueId' is set
      if (customerRevenueId === undefined || customerRevenueId === null) {
        throw new Error("Missing the required parameter 'customerRevenueId' when calling updateCustomerRevenueUsingPut");
      }


      var pathParams = {
        'customer_revenue_id': customerRevenueId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = CustomerRevenue;

      return this.apiClient.callApi(
        '/customer_revenue/{customer_revenue_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomerUsingPut operation.
     * @callback module:api/CustomerApi~updateCustomerUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a customer
     * Update a customer. 
     * @param {module:model/Customer} customer customer
     * @param {String} customerId UUID customer_id
     * @param {module:api/CustomerApi~updateCustomerUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.updateCustomerUsingPut = function(customer, customerId, callback) {
      var postBody = customer;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling updateCustomerUsingPut");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomerUsingPut");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customer/{customer_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
