/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.PerformanceApi = factory(root.HydrogenNucleusApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Performance service.
   * @module api/PerformanceApi
   * @version 1.7.0
   */

  /**
   * Constructs a new PerformanceApi. 
   * @alias module:api/PerformanceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAccountPerformanceUsingGet operation.
     * @callback module:api/PerformanceApi~getAccountPerformanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Performance
     * Get information on the performance of an account using IRR (Internal Rate of Return). You must provide the unique account_id.
     * @param {String} accountId Account Id -/account
     * @param {Object} opts Optional parameters
     * @param {String} opts.activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark
     * @param {Date} opts.endDate end date
     * @param {Number} opts.histFactor Histogram factor- (statId: 39, default: 5)
     * @param {Number} opts.marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
     * @param {Number} opts.maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
     * @param {Number} opts.meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
     * @param {Number} opts.minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
     * @param {Number} opts.movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7)
     * @param {Number} opts.nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)  
     * @param {Number} opts.nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100)
     * @param {Number} opts.nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
     * @param {Number} opts.nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
     * @param {Number} opts.numSimMonteCarlo number of simulations - (statId: 62, default: 1000) 
     * @param {String} opts.periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
     * @param {Number} opts.riskFreeAlpha risk free val alpha - (statId: 52, default: 0)
     * @param {Number} opts.riskFreeSharpe risk free val sharpe- (statId: 49, default: 0) 
     * @param {Number} opts.riskFreeSortino risk free val sortino - (statId: 56, default: 0)
     * @param {Number} opts.riskFreeTreynor risk free val treynor- (statId: 51, default: 0) 
     * @param {Date} opts.startDate start date
     * @param {String} opts.stat A stat type - /statistics
     * @param {Number} opts.varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
     * @param {module:api/PerformanceApi~getAccountPerformanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getAccountPerformanceUsingGet = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountPerformanceUsingGet");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
        'active_premium_period': opts['activePremiumPeriod'],
        'annualized_return_period': opts['annualizedReturnPeriod'],
        'benchmark_id': opts['benchmarkId'],
        'end_date': opts['endDate'],
        'hist_factor': opts['histFactor'],
        'mar_down_side_deviation': opts['marDownSideDeviation'],
        'max_percentile_monte_carlo': opts['maxPercentileMonteCarlo'],
        'mean_percentile_monte_carlo': opts['meanPercentileMonteCarlo'],
        'min_percentile_monte_carlo': opts['minPercentileMonteCarlo'],
        'moving_average_n_day': opts['movingAverageNDay'],
        'n_day_returns': opts['nDayReturns'],
        'n_path_monte_carlo': opts['nPathMonteCarlo'],
        'n_rolling_max_drawdown': opts['nRollingMaxDrawdown'],
        'n_rolling_volatility': opts['nRollingVolatility'],
        'num_sim_monte_carlo': opts['numSimMonteCarlo'],
        'period_type': opts['periodType'],
        'risk_free_alpha': opts['riskFreeAlpha'],
        'risk_free_sharpe': opts['riskFreeSharpe'],
        'risk_free_sortino': opts['riskFreeSortino'],
        'risk_free_treynor': opts['riskFreeTreynor'],
        'start_date': opts['startDate'],
        'stat': opts['stat'],
        'var_conf_interval': opts['varConfInterval']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/account/{account_id}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationPerformanceUsingGet operation.
     * @callback module:api/PerformanceApi~getAllocationPerformanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allocation Performance
     * Get information on the performance of an allocation using TWR (Time Weighted Return). You must provide the unique allocation_id.
     * @param {String} allocationId Allocation Id -/allocation
     * @param {Object} opts Optional parameters
     * @param {String} opts.activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.benchmarkId Tenant Benchmark Id -/benchmark
     * @param {Date} opts.endDate end date
     * @param {Number} opts.histFactor Histogram factor- (statId: 39, default: 5)
     * @param {Boolean} opts.isCurrentWeight is_current_weight (default to true)
     * @param {Number} opts.marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
     * @param {Number} opts.maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
     * @param {Number} opts.meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
     * @param {Number} opts.minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
     * @param {Number} opts.movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7)
     * @param {Number} opts.nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)  
     * @param {Number} opts.nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100)
     * @param {Number} opts.nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
     * @param {Number} opts.nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
     * @param {Number} opts.numSimMonteCarlo number of simulations - (statId: 62, default: 1000) 
     * @param {String} opts.periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
     * @param {Number} opts.riskFreeAlpha risk free val alpha - (statId: 52, default: 0)
     * @param {Number} opts.riskFreeSharpe risk free val sharpe- (statId: 49, default: 0) 
     * @param {Number} opts.riskFreeSortino risk free val sortino - (statId: 56, default: 0)
     * @param {Number} opts.riskFreeTreynor risk free val treynor- (statId: 51, default: 0) 
     * @param {Date} opts.startDate start date
     * @param {String} opts.stat A stat type found under the Statistics banner
     * @param {Number} opts.varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
     * @param {module:api/PerformanceApi~getAllocationPerformanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.getAllocationPerformanceUsingGet = function(allocationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAllocationPerformanceUsingGet");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
        'active_premium_period': opts['activePremiumPeriod'],
        'annualized_return_period': opts['annualizedReturnPeriod'],
        'benchmark_id': opts['benchmarkId'],
        'end_date': opts['endDate'],
        'hist_factor': opts['histFactor'],
        'is_current_weight': opts['isCurrentWeight'],
        'mar_down_side_deviation': opts['marDownSideDeviation'],
        'max_percentile_monte_carlo': opts['maxPercentileMonteCarlo'],
        'mean_percentile_monte_carlo': opts['meanPercentileMonteCarlo'],
        'min_percentile_monte_carlo': opts['minPercentileMonteCarlo'],
        'moving_average_n_day': opts['movingAverageNDay'],
        'n_day_returns': opts['nDayReturns'],
        'n_path_monte_carlo': opts['nPathMonteCarlo'],
        'n_rolling_max_drawdown': opts['nRollingMaxDrawdown'],
        'n_rolling_volatility': opts['nRollingVolatility'],
        'num_sim_monte_carlo': opts['numSimMonteCarlo'],
        'period_type': opts['periodType'],
        'risk_free_alpha': opts['riskFreeAlpha'],
        'risk_free_sharpe': opts['riskFreeSharpe'],
        'risk_free_sortino': opts['riskFreeSortino'],
        'risk_free_treynor': opts['riskFreeTreynor'],
        'start_date': opts['startDate'],
        'stat': opts['stat'],
        'var_conf_interval': opts['varConfInterval']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/allocation/{allocation_id}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBenchmarkPerformanceUsingGet operation.
     * @callback module:api/PerformanceApi~getBenchmarkPerformanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Benchmark Performance
     * Get information on the performance of a benchmark using TWR (Time Weighted Return). You must provide the unique benchmark_id.
     * @param {String} benchmarkId Benchmark Id - /benchmark
     * @param {Object} opts Optional parameters
     * @param {String} opts.activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.comparisonBenchmarkId comparison_benchmark_id
     * @param {Date} opts.endDate end date
     * @param {Number} opts.histFactor Histogram factor- (statId: 39, default: 5)
     * @param {Number} opts.marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
     * @param {Number} opts.maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
     * @param {Number} opts.meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
     * @param {Number} opts.minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
     * @param {Number} opts.movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7)
     * @param {Number} opts.nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)  
     * @param {Number} opts.nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100)
     * @param {Number} opts.nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
     * @param {Number} opts.nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
     * @param {Number} opts.numSimMonteCarlo number of simulations - (statId: 62, default: 1000) 
     * @param {String} opts.periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
     * @param {Number} opts.riskFreeAlpha risk free val alpha - (statId: 52, default: 0)
     * @param {Number} opts.riskFreeSharpe risk free val sharpe- (statId: 49, default: 0) 
     * @param {Number} opts.riskFreeSortino risk free val sortino - (statId: 56, default: 0)
     * @param {Number} opts.riskFreeTreynor risk free val treynor- (statId: 51, default: 0) 
     * @param {Date} opts.startDate start date
     * @param {String} opts.stat Stat type - /statistics endpoint
     * @param {Number} opts.varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
     * @param {module:api/PerformanceApi~getBenchmarkPerformanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getBenchmarkPerformanceUsingGet = function(benchmarkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'benchmarkId' is set
      if (benchmarkId === undefined || benchmarkId === null) {
        throw new Error("Missing the required parameter 'benchmarkId' when calling getBenchmarkPerformanceUsingGet");
      }


      var pathParams = {
        'benchmark_id': benchmarkId
      };
      var queryParams = {
        'active_premium_period': opts['activePremiumPeriod'],
        'annualized_return_period': opts['annualizedReturnPeriod'],
        'comparison_benchmark_id': opts['comparisonBenchmarkId'],
        'end_date': opts['endDate'],
        'hist_factor': opts['histFactor'],
        'mar_down_side_deviation': opts['marDownSideDeviation'],
        'max_percentile_monte_carlo': opts['maxPercentileMonteCarlo'],
        'mean_percentile_monte_carlo': opts['meanPercentileMonteCarlo'],
        'min_percentile_monte_carlo': opts['minPercentileMonteCarlo'],
        'moving_average_n_day': opts['movingAverageNDay'],
        'n_day_returns': opts['nDayReturns'],
        'n_path_monte_carlo': opts['nPathMonteCarlo'],
        'n_rolling_max_drawdown': opts['nRollingMaxDrawdown'],
        'n_rolling_volatility': opts['nRollingVolatility'],
        'num_sim_monte_carlo': opts['numSimMonteCarlo'],
        'period_type': opts['periodType'],
        'risk_free_alpha': opts['riskFreeAlpha'],
        'risk_free_sharpe': opts['riskFreeSharpe'],
        'risk_free_sortino': opts['riskFreeSortino'],
        'risk_free_treynor': opts['riskFreeTreynor'],
        'start_date': opts['startDate'],
        'stat': opts['stat'],
        'var_conf_interval': opts['varConfInterval']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/benchmark/{benchmark_id}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientPerformanceUsingGet operation.
     * @callback module:api/PerformanceApi~getClientPerformanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Client Performance
     * Get information on the performance of a client using IRR (Internal Rate of Return). You must provide the unique client_id.
     * @param {String} clientId Client Id -/client
     * @param {Object} opts Optional parameters
     * @param {String} opts.activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark
     * @param {Date} opts.endDate end date
     * @param {Number} opts.histFactor Histogram factor- (statId: 39, default: 5)
     * @param {Number} opts.marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
     * @param {Number} opts.maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
     * @param {Number} opts.meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
     * @param {Number} opts.minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
     * @param {Number} opts.movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7)
     * @param {Number} opts.nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)  
     * @param {Number} opts.nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100)
     * @param {Number} opts.nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
     * @param {Number} opts.nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
     * @param {Number} opts.numSimMonteCarlo number of simulations - (statId: 62, default: 1000) 
     * @param {String} opts.periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
     * @param {Number} opts.riskFreeAlpha risk free val alpha - (statId: 52, default: 0)
     * @param {Number} opts.riskFreeSharpe risk free val sharpe- (statId: 49, default: 0) 
     * @param {Number} opts.riskFreeSortino risk free val sortino - (statId: 56, default: 0)
     * @param {Number} opts.riskFreeTreynor risk free val treynor- (statId: 51, default: 0) 
     * @param {Date} opts.startDate start date
     * @param {String} opts.stat A stat type -- /statistics
     * @param {Number} opts.varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
     * @param {module:api/PerformanceApi~getClientPerformanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getClientPerformanceUsingGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientPerformanceUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'active_premium_period': opts['activePremiumPeriod'],
        'annualized_return_period': opts['annualizedReturnPeriod'],
        'benchmark_id': opts['benchmarkId'],
        'end_date': opts['endDate'],
        'hist_factor': opts['histFactor'],
        'mar_down_side_deviation': opts['marDownSideDeviation'],
        'max_percentile_monte_carlo': opts['maxPercentileMonteCarlo'],
        'mean_percentile_monte_carlo': opts['meanPercentileMonteCarlo'],
        'min_percentile_monte_carlo': opts['minPercentileMonteCarlo'],
        'moving_average_n_day': opts['movingAverageNDay'],
        'n_day_returns': opts['nDayReturns'],
        'n_path_monte_carlo': opts['nPathMonteCarlo'],
        'n_rolling_max_drawdown': opts['nRollingMaxDrawdown'],
        'n_rolling_volatility': opts['nRollingVolatility'],
        'num_sim_monte_carlo': opts['numSimMonteCarlo'],
        'period_type': opts['periodType'],
        'risk_free_alpha': opts['riskFreeAlpha'],
        'risk_free_sharpe': opts['riskFreeSharpe'],
        'risk_free_sortino': opts['riskFreeSortino'],
        'risk_free_treynor': opts['riskFreeTreynor'],
        'start_date': opts['startDate'],
        'stat': opts['stat'],
        'var_conf_interval': opts['varConfInterval']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/client/{client_id}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoalPerformanceUsingGet operation.
     * @callback module:api/PerformanceApi~getGoalPerformanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal Performance
     * Get information on the performance of a goal using IRR (Internal Rate of Return). You must provide the unique goal_id.
     * @param {String} clientId Client associated with the account - /client
     * @param {String} goalId Goal Id - /account
     * @param {Object} opts Optional parameters
     * @param {String} opts.activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.benchmarkId Client Benchmark or Tenant Benchmark id -/benchmark
     * @param {Date} opts.endDate end date (default to null)
     * @param {Number} opts.histFactor Histogram factor- (statId: 39, default: 5)
     * @param {Number} opts.marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
     * @param {Number} opts.maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
     * @param {Number} opts.meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
     * @param {Number} opts.minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
     * @param {Number} opts.movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7)
     * @param {Number} opts.nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)  
     * @param {Number} opts.nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100)
     * @param {Number} opts.nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
     * @param {Number} opts.nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
     * @param {Number} opts.numSimMonteCarlo number of simulations - (statId: 62, default: 1000) 
     * @param {String} opts.periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
     * @param {Boolean} opts.portfolioGoal portfolio_goal (default to false)
     * @param {Number} opts.riskFreeAlpha risk free val alpha - (statId: 52, default: 0)
     * @param {Number} opts.riskFreeSharpe risk free val sharpe- (statId: 49, default: 0) 
     * @param {Number} opts.riskFreeSortino risk free val sortino - (statId: 56, default: 0)
     * @param {Number} opts.riskFreeTreynor risk free val treynor- (statId: 51, default: 0) 
     * @param {Date} opts.startDate start date (default to null)
     * @param {String} opts.stat A stat type - /statistics
     * @param {Number} opts.varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
     * @param {module:api/PerformanceApi~getGoalPerformanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getGoalPerformanceUsingGet = function(clientId, goalId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getGoalPerformanceUsingGet");
      }

      // verify the required parameter 'goalId' is set
      if (goalId === undefined || goalId === null) {
        throw new Error("Missing the required parameter 'goalId' when calling getGoalPerformanceUsingGet");
      }


      var pathParams = {
        'client_id': clientId,
        'goal_id': goalId
      };
      var queryParams = {
        'active_premium_period': opts['activePremiumPeriod'],
        'annualized_return_period': opts['annualizedReturnPeriod'],
        'benchmark_id': opts['benchmarkId'],
        'end_date': opts['endDate'],
        'hist_factor': opts['histFactor'],
        'mar_down_side_deviation': opts['marDownSideDeviation'],
        'max_percentile_monte_carlo': opts['maxPercentileMonteCarlo'],
        'mean_percentile_monte_carlo': opts['meanPercentileMonteCarlo'],
        'min_percentile_monte_carlo': opts['minPercentileMonteCarlo'],
        'moving_average_n_day': opts['movingAverageNDay'],
        'n_day_returns': opts['nDayReturns'],
        'n_path_monte_carlo': opts['nPathMonteCarlo'],
        'n_rolling_max_drawdown': opts['nRollingMaxDrawdown'],
        'n_rolling_volatility': opts['nRollingVolatility'],
        'num_sim_monte_carlo': opts['numSimMonteCarlo'],
        'period_type': opts['periodType'],
        'portfolio_goal': opts['portfolioGoal'],
        'risk_free_alpha': opts['riskFreeAlpha'],
        'risk_free_sharpe': opts['riskFreeSharpe'],
        'risk_free_sortino': opts['riskFreeSortino'],
        'risk_free_treynor': opts['riskFreeTreynor'],
        'start_date': opts['startDate'],
        'stat': opts['stat'],
        'var_conf_interval': opts['varConfInterval']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/goal/{goal_id}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelPerformanceUsingGet operation.
     * @callback module:api/PerformanceApi~getModelPerformanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Model Performance
     * Get information on the performance of a model using TWR (Time Weighted Return). You must provide the unique model_id.
     * @param {String} modelId Model Id - /model
     * @param {Object} opts Optional parameters
     * @param {String} opts.activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.benchmarkId Tenant Benchmark Id -/benchmark
     * @param {Date} opts.endDate end date
     * @param {Number} opts.histFactor Histogram factor- (statId: 39, default: 5)
     * @param {Number} opts.marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
     * @param {Number} opts.maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
     * @param {Number} opts.meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
     * @param {Number} opts.minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
     * @param {Number} opts.movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7)
     * @param {Number} opts.nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)  
     * @param {Number} opts.nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100)
     * @param {Number} opts.nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
     * @param {Number} opts.nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
     * @param {Number} opts.numSimMonteCarlo number of simulations - (statId: 62, default: 1000) 
     * @param {String} opts.periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
     * @param {Number} opts.riskFreeAlpha risk free val alpha - (statId: 52, default: 0)
     * @param {Number} opts.riskFreeSharpe risk free val sharpe- (statId: 49, default: 0) 
     * @param {Number} opts.riskFreeSortino risk free val sortino - (statId: 56, default: 0)
     * @param {Number} opts.riskFreeTreynor risk free val treynor- (statId: 51, default: 0) 
     * @param {Date} opts.startDate start date
     * @param {String} opts.stat Stat Type
     * @param {Number} opts.varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
     * @param {module:api/PerformanceApi~getModelPerformanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getModelPerformanceUsingGet = function(modelId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getModelPerformanceUsingGet");
      }


      var pathParams = {
        'model_id': modelId
      };
      var queryParams = {
        'active_premium_period': opts['activePremiumPeriod'],
        'annualized_return_period': opts['annualizedReturnPeriod'],
        'benchmark_id': opts['benchmarkId'],
        'end_date': opts['endDate'],
        'hist_factor': opts['histFactor'],
        'mar_down_side_deviation': opts['marDownSideDeviation'],
        'max_percentile_monte_carlo': opts['maxPercentileMonteCarlo'],
        'mean_percentile_monte_carlo': opts['meanPercentileMonteCarlo'],
        'min_percentile_monte_carlo': opts['minPercentileMonteCarlo'],
        'moving_average_n_day': opts['movingAverageNDay'],
        'n_day_returns': opts['nDayReturns'],
        'n_path_monte_carlo': opts['nPathMonteCarlo'],
        'n_rolling_max_drawdown': opts['nRollingMaxDrawdown'],
        'n_rolling_volatility': opts['nRollingVolatility'],
        'num_sim_monte_carlo': opts['numSimMonteCarlo'],
        'period_type': opts['periodType'],
        'risk_free_alpha': opts['riskFreeAlpha'],
        'risk_free_sharpe': opts['riskFreeSharpe'],
        'risk_free_sortino': opts['riskFreeSortino'],
        'risk_free_treynor': opts['riskFreeTreynor'],
        'start_date': opts['startDate'],
        'stat': opts['stat'],
        'var_conf_interval': opts['varConfInterval']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/model/{model_id}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioPerformanceUsingGet operation.
     * @callback module:api/PerformanceApi~getPortfolioPerformanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Portfolio Performance
     * Get information on the performance of a portfolio using IRR (Internal Rate of Return). You must provide the unique portfolio_id.
     * @param {String} accountId Account Id -/account
     * @param {String} clientId Client Id -/client
     * @param {String} portfolioId portfolio_id
     * @param {String} portfolioid Portfolio Id -/portoflio
     * @param {Object} opts Optional parameters
     * @param {String} opts.activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.benchmarkId Benchmark Id - benchmarkId or clientBenchmarkId -/benchmark
     * @param {Date} opts.endDate end date
     * @param {Number} opts.histFactor Histogram factor- (statId: 39, default: 5)
     * @param {Number} opts.marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
     * @param {Number} opts.maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
     * @param {Number} opts.meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
     * @param {Number} opts.minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
     * @param {Number} opts.movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7)
     * @param {Number} opts.nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)  
     * @param {Number} opts.nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100)
     * @param {Number} opts.nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
     * @param {Number} opts.nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
     * @param {Number} opts.numSimMonteCarlo number of simulations - (statId: 62, default: 1000) 
     * @param {String} opts.periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
     * @param {Number} opts.riskFreeAlpha risk free val alpha - (statId: 52, default: 0)
     * @param {Number} opts.riskFreeSharpe risk free val sharpe- (statId: 49, default: 0) 
     * @param {Number} opts.riskFreeSortino risk free val sortino - (statId: 56, default: 0)
     * @param {Number} opts.riskFreeTreynor risk free val treynor- (statId: 51, default: 0) 
     * @param {Date} opts.startDate start date
     * @param {String} opts.stat A stat type - /statistics endpoint to get types
     * @param {Number} opts.varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
     * @param {module:api/PerformanceApi~getPortfolioPerformanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getPortfolioPerformanceUsingGet = function(accountId, clientId, portfolioId, portfolioid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPortfolioPerformanceUsingGet");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getPortfolioPerformanceUsingGet");
      }

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getPortfolioPerformanceUsingGet");
      }

      // verify the required parameter 'portfolioid' is set
      if (portfolioid === undefined || portfolioid === null) {
        throw new Error("Missing the required parameter 'portfolioid' when calling getPortfolioPerformanceUsingGet");
      }


      var pathParams = {
        'account_id': accountId,
        'client_id': clientId,
        'portfolio_id': portfolioId,
        'portfolioid': portfolioid
      };
      var queryParams = {
        'active_premium_period': opts['activePremiumPeriod'],
        'annualized_return_period': opts['annualizedReturnPeriod'],
        'benchmark_id': opts['benchmarkId'],
        'end_date': opts['endDate'],
        'hist_factor': opts['histFactor'],
        'mar_down_side_deviation': opts['marDownSideDeviation'],
        'max_percentile_monte_carlo': opts['maxPercentileMonteCarlo'],
        'mean_percentile_monte_carlo': opts['meanPercentileMonteCarlo'],
        'min_percentile_monte_carlo': opts['minPercentileMonteCarlo'],
        'moving_average_n_day': opts['movingAverageNDay'],
        'n_day_returns': opts['nDayReturns'],
        'n_path_monte_carlo': opts['nPathMonteCarlo'],
        'n_rolling_max_drawdown': opts['nRollingMaxDrawdown'],
        'n_rolling_volatility': opts['nRollingVolatility'],
        'num_sim_monte_carlo': opts['numSimMonteCarlo'],
        'period_type': opts['periodType'],
        'risk_free_alpha': opts['riskFreeAlpha'],
        'risk_free_sharpe': opts['riskFreeSharpe'],
        'risk_free_sortino': opts['riskFreeSortino'],
        'risk_free_treynor': opts['riskFreeTreynor'],
        'start_date': opts['startDate'],
        'stat': opts['stat'],
        'var_conf_interval': opts['varConfInterval']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/portfolio/{portfolio_id}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityPerformanceUsingGet operation.
     * @callback module:api/PerformanceApi~getSecurityPerformanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security Performance
     * Get performance statistics for a security using TWR (Time Weighted Return). You must provide the unique security_id
     * @param {String} securityId security_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.activePremiumPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.annualizedReturnPeriod Q (quarterly), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () - (statId: 19, default: &#39;D&#39;)
     * @param {String} opts.benchTicker Bench Ticker for security - (default: ^GSPC) 
     * @param {String} opts.benchmarkId benchmark_id
     * @param {Date} opts.endDate Ending parameter for time window
     * @param {Number} opts.histFactor Histogram factor- (statId: 39, default: 5)
     * @param {Number} opts.marDownSideDeviation minimum acceptable return for downside deviation - (statId: 58, default: 0) 
     * @param {Number} opts.maxPercentileMonteCarlo max percentile for monte carlo, i.entity. 80 - (statId: 62, default: 95)
     * @param {Number} opts.meanPercentileMonteCarlo mean percentile for monte carlo i.entity. 50- (statId: 62, default: 50)
     * @param {Number} opts.minPercentileMonteCarlo min percentile for monte carlo i.entity. 20 - (statId: 62, default: 5)
     * @param {Number} opts.movingAverageNDay number of days for moving average n-day - (statId: 18, default: 7)
     * @param {Number} opts.nDayReturns number of days for Rolling n-day returns - (statId: 2, default: 7)  
     * @param {Number} opts.nPathMonteCarlo number of points for a simulation- (statId: 62, default: 100)
     * @param {Number} opts.nRollingMaxDrawdown number of days for Rolling n-day max drawdown- (statId: 46, default: 7)
     * @param {Number} opts.nRollingVolatility number of days for Rolling n-day volatility- (statId: 34, default: 7)
     * @param {Number} opts.numSimMonteCarlo number of simulations - (statId: 62, default: 1000) 
     * @param {String} opts.periodType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () -Carries out stats on either daily, monthly, annually or quarterly dates (default: &#39;D&#39;)
     * @param {Number} opts.riskFreeAlpha risk free val alpha - (statId: 52, default: 0)
     * @param {Number} opts.riskFreeSharpe risk free val sharpe- (statId: 49, default: 0) 
     * @param {Number} opts.riskFreeSortino risk free val sortino - (statId: 56, default: 0)
     * @param {Number} opts.riskFreeTreynor risk free val treynor- (statId: 51, default: 0) 
     * @param {Date} opts.startDate Starting parameter for time window
     * @param {String} opts.stat A stat type - /statistics endpoint
     * @param {String} opts.ticker Ticker for security
     * @param {Number} opts.varConfInterval VaR Confidence Interval ( alpha ) i.entity 99, 95, etc - (statId: 40, default: 95)
     * @param {module:api/PerformanceApi~getSecurityPerformanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getSecurityPerformanceUsingGet = function(securityId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'securityId' is set
      if (securityId === undefined || securityId === null) {
        throw new Error("Missing the required parameter 'securityId' when calling getSecurityPerformanceUsingGet");
      }


      var pathParams = {
        'security_id': securityId
      };
      var queryParams = {
        'active_premium_period': opts['activePremiumPeriod'],
        'annualized_return_period': opts['annualizedReturnPeriod'],
        'benchTicker': opts['benchTicker'],
        'benchmark_id': opts['benchmarkId'],
        'end_date': opts['endDate'],
        'hist_factor': opts['histFactor'],
        'mar_down_side_deviation': opts['marDownSideDeviation'],
        'max_percentile_monte_carlo': opts['maxPercentileMonteCarlo'],
        'mean_percentile_monte_carlo': opts['meanPercentileMonteCarlo'],
        'min_percentile_monte_carlo': opts['minPercentileMonteCarlo'],
        'moving_average_n_day': opts['movingAverageNDay'],
        'n_day_returns': opts['nDayReturns'],
        'n_path_monte_carlo': opts['nPathMonteCarlo'],
        'n_rolling_max_drawdown': opts['nRollingMaxDrawdown'],
        'n_rolling_volatility': opts['nRollingVolatility'],
        'num_sim_monte_carlo': opts['numSimMonteCarlo'],
        'period_type': opts['periodType'],
        'risk_free_alpha': opts['riskFreeAlpha'],
        'risk_free_sharpe': opts['riskFreeSharpe'],
        'risk_free_sortino': opts['riskFreeSortino'],
        'risk_free_treynor': opts['riskFreeTreynor'],
        'start_date': opts['startDate'],
        'stat': opts['stat'],
        'ticker': opts['ticker'],
        'var_conf_interval': opts['varConfInterval']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/security/{security_id}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
