/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Notification', 'model/NotificationClient', 'model/NotificationSetting', 'model/PageNotification', 'model/PageNotificationClient', 'model/PageNotificationSetting'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Notification'), require('../model/NotificationClient'), require('../model/NotificationSetting'), require('../model/PageNotification'), require('../model/PageNotificationClient'), require('../model/PageNotificationSetting'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.NotificationApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.Notification, root.HydrogenNucleusApi.NotificationClient, root.HydrogenNucleusApi.NotificationSetting, root.HydrogenNucleusApi.PageNotification, root.HydrogenNucleusApi.PageNotificationClient, root.HydrogenNucleusApi.PageNotificationSetting);
  }
}(this, function(ApiClient, Notification, NotificationClient, NotificationSetting, PageNotification, PageNotificationClient, PageNotificationSetting) {
  'use strict';

  /**
   * Notification service.
   * @module api/NotificationApi
   * @version 1.7.0
   */

  /**
   * Constructs a new NotificationApi. 
   * @alias module:api/NotificationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createNotificationClientUsingPost operation.
     * @callback module:api/NotificationApi~createNotificationClientUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Notification Client
     * Create a new Notification Client. 
     * @param {module:model/NotificationClient} notificationClient notificationClient
     * @param {module:api/NotificationApi~createNotificationClientUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationClient}
     */
    this.createNotificationClientUsingPost = function(notificationClient, callback) {
      var postBody = notificationClient;

      // verify the required parameter 'notificationClient' is set
      if (notificationClient === undefined || notificationClient === null) {
        throw new Error("Missing the required parameter 'notificationClient' when calling createNotificationClientUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = NotificationClient;

      return this.apiClient.callApi(
        '/notification_client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNotificationSettingUsingPost operation.
     * @callback module:api/NotificationApi~createNotificationSettingUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Notification Setting
     * Create a new Notification Setting. 
     * @param {module:model/NotificationSetting} notificationSetting notificationSetting
     * @param {module:api/NotificationApi~createNotificationSettingUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSetting}
     */
    this.createNotificationSettingUsingPost = function(notificationSetting, callback) {
      var postBody = notificationSetting;

      // verify the required parameter 'notificationSetting' is set
      if (notificationSetting === undefined || notificationSetting === null) {
        throw new Error("Missing the required parameter 'notificationSetting' when calling createNotificationSettingUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = NotificationSetting;

      return this.apiClient.callApi(
        '/notification_setting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNotificationUsingPost operation.
     * @callback module:api/NotificationApi~createNotificationUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Notification
     * Create a new Notification. 
     * @param {module:model/Notification} notification notification
     * @param {module:api/NotificationApi~createNotificationUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    this.createNotificationUsingPost = function(notification, callback) {
      var postBody = notification;

      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling createNotificationUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Notification;

      return this.apiClient.callApi(
        '/notification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationClientUsingDelete operation.
     * @callback module:api/NotificationApi~deleteNotificationClientUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Notification Client
     * Permanently Delete Notification Client.
     * @param {String} notificationClientId notification_client_id
     * @param {module:api/NotificationApi~deleteNotificationClientUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNotificationClientUsingDelete = function(notificationClientId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationClientId' is set
      if (notificationClientId === undefined || notificationClientId === null) {
        throw new Error("Missing the required parameter 'notificationClientId' when calling deleteNotificationClientUsingDelete");
      }


      var pathParams = {
        'notification_client_id': notificationClientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notification_client/{notification_client_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationSettingUsingDelete operation.
     * @callback module:api/NotificationApi~deleteNotificationSettingUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Notification Setting
     * Permanently Delete Notification Setting. 
     * @param {String} notificationSettingId notification_setting_id
     * @param {module:api/NotificationApi~deleteNotificationSettingUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNotificationSettingUsingDelete = function(notificationSettingId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationSettingId' is set
      if (notificationSettingId === undefined || notificationSettingId === null) {
        throw new Error("Missing the required parameter 'notificationSettingId' when calling deleteNotificationSettingUsingDelete");
      }


      var pathParams = {
        'notification_setting_id': notificationSettingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notification_setting/{notification_setting_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationUsingDelete operation.
     * @callback module:api/NotificationApi~deleteNotificationUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Notification
     * Permanently Delete a Notification. 
     * @param {String} notificationId UUID notification_id
     * @param {module:api/NotificationApi~deleteNotificationUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNotificationUsingDelete = function(notificationId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling deleteNotificationUsingDelete");
      }


      var pathParams = {
        'notification_id': notificationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notification/{notification_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationAllUsingGet operation.
     * @callback module:api/NotificationApi~getNotificationAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Notification
     * Get All Notification. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/NotificationApi~getNotificationAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageNotification}
     */
    this.getNotificationAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageNotification;

      return this.apiClient.callApi(
        '/notification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationClientAllUsingGet operation.
     * @callback module:api/NotificationApi~getNotificationClientAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageNotificationClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Notification Client
     * List all Notification Client. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/NotificationApi~getNotificationClientAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageNotificationClient}
     */
    this.getNotificationClientAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageNotificationClient;

      return this.apiClient.callApi(
        '/notification_client', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationClientUsingGet operation.
     * @callback module:api/NotificationApi~getNotificationClientUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Notification Client
     * Retrieve a  Notification Client. 
     * @param {String} notificationClientId notification_client_id
     * @param {module:api/NotificationApi~getNotificationClientUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationClient}
     */
    this.getNotificationClientUsingGet = function(notificationClientId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationClientId' is set
      if (notificationClientId === undefined || notificationClientId === null) {
        throw new Error("Missing the required parameter 'notificationClientId' when calling getNotificationClientUsingGet");
      }


      var pathParams = {
        'notification_client_id': notificationClientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = NotificationClient;

      return this.apiClient.callApi(
        '/notification_client/{notification_client_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationSettingAllUsingGet operation.
     * @callback module:api/NotificationApi~getNotificationSettingAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageNotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Notification Setting
     * List all Notification Setting. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/NotificationApi~getNotificationSettingAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageNotificationSetting}
     */
    this.getNotificationSettingAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageNotificationSetting;

      return this.apiClient.callApi(
        '/notification_setting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationSettingUsingGet operation.
     * @callback module:api/NotificationApi~getNotificationSettingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Notification Setting
     * Retrieve a  Notification Setting. 
     * @param {String} notificationSettingId notification_setting_id
     * @param {module:api/NotificationApi~getNotificationSettingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSetting}
     */
    this.getNotificationSettingUsingGet = function(notificationSettingId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationSettingId' is set
      if (notificationSettingId === undefined || notificationSettingId === null) {
        throw new Error("Missing the required parameter 'notificationSettingId' when calling getNotificationSettingUsingGet");
      }


      var pathParams = {
        'notification_setting_id': notificationSettingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = NotificationSetting;

      return this.apiClient.callApi(
        '/notification_setting/{notification_setting_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationUsingGet operation.
     * @callback module:api/NotificationApi~getNotificationUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Notification
     * Get a Notification. 
     * @param {String} notificationId notification_id
     * @param {module:api/NotificationApi~getNotificationUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    this.getNotificationUsingGet = function(notificationId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling getNotificationUsingGet");
      }


      var pathParams = {
        'notification_id': notificationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Notification;

      return this.apiClient.callApi(
        '/notification/{notification_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotificationClientUsingPut operation.
     * @callback module:api/NotificationApi~updateNotificationClientUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Notification Client
     * Update a  Notification Client. 
     * @param {module:model/NotificationClient} notificationClient notification_client
     * @param {String} notificationClientId UUID notification_client_id
     * @param {module:api/NotificationApi~updateNotificationClientUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationClient}
     */
    this.updateNotificationClientUsingPut = function(notificationClient, notificationClientId, callback) {
      var postBody = notificationClient;

      // verify the required parameter 'notificationClient' is set
      if (notificationClient === undefined || notificationClient === null) {
        throw new Error("Missing the required parameter 'notificationClient' when calling updateNotificationClientUsingPut");
      }

      // verify the required parameter 'notificationClientId' is set
      if (notificationClientId === undefined || notificationClientId === null) {
        throw new Error("Missing the required parameter 'notificationClientId' when calling updateNotificationClientUsingPut");
      }


      var pathParams = {
        'notification_client_id': notificationClientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = NotificationClient;

      return this.apiClient.callApi(
        '/notification_client/{notification_client_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotificationSettingUsingPut operation.
     * @callback module:api/NotificationApi~updateNotificationSettingUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Notification Setting
     * Update a  Notification Setting. 
     * @param {module:model/NotificationSetting} notificationSetting notification_setting
     * @param {String} notificationSettingId UUID notification_setting_id
     * @param {module:api/NotificationApi~updateNotificationSettingUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSetting}
     */
    this.updateNotificationSettingUsingPut = function(notificationSetting, notificationSettingId, callback) {
      var postBody = notificationSetting;

      // verify the required parameter 'notificationSetting' is set
      if (notificationSetting === undefined || notificationSetting === null) {
        throw new Error("Missing the required parameter 'notificationSetting' when calling updateNotificationSettingUsingPut");
      }

      // verify the required parameter 'notificationSettingId' is set
      if (notificationSettingId === undefined || notificationSettingId === null) {
        throw new Error("Missing the required parameter 'notificationSettingId' when calling updateNotificationSettingUsingPut");
      }


      var pathParams = {
        'notification_setting_id': notificationSettingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = NotificationSetting;

      return this.apiClient.callApi(
        '/notification_setting/{notification_setting_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotificationUsingPut operation.
     * @callback module:api/NotificationApi~updateNotificationUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Notification
     * Update a Notification. 
     * @param {module:model/Notification} notification notification
     * @param {String} notificationId UUID notification_id
     * @param {module:api/NotificationApi~updateNotificationUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    this.updateNotificationUsingPut = function(notification, notificationId, callback) {
      var postBody = notification;

      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling updateNotificationUsingPut");
      }

      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling updateNotificationUsingPut");
      }


      var pathParams = {
        'notification_id': notificationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Notification;

      return this.apiClient.callApi(
        '/notification/{notification_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
