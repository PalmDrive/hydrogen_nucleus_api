/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ChatInfo', 'model/Consultation', 'model/PageChatInfo', 'model/PageConsultation', 'model/PageSale', 'model/PageSupportTicket', 'model/PageSupportTicketComment', 'model/Sale', 'model/SupportTicket', 'model/SupportTicketComment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ChatInfo'), require('../model/Consultation'), require('../model/PageChatInfo'), require('../model/PageConsultation'), require('../model/PageSale'), require('../model/PageSupportTicket'), require('../model/PageSupportTicketComment'), require('../model/Sale'), require('../model/SupportTicket'), require('../model/SupportTicketComment'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.SupportApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.ChatInfo, root.HydrogenNucleusApi.Consultation, root.HydrogenNucleusApi.PageChatInfo, root.HydrogenNucleusApi.PageConsultation, root.HydrogenNucleusApi.PageSale, root.HydrogenNucleusApi.PageSupportTicket, root.HydrogenNucleusApi.PageSupportTicketComment, root.HydrogenNucleusApi.Sale, root.HydrogenNucleusApi.SupportTicket, root.HydrogenNucleusApi.SupportTicketComment);
  }
}(this, function(ApiClient, ChatInfo, Consultation, PageChatInfo, PageConsultation, PageSale, PageSupportTicket, PageSupportTicketComment, Sale, SupportTicket, SupportTicketComment) {
  'use strict';

  /**
   * Support service.
   * @module api/SupportApi
   * @version 1.7.0
   */

  /**
   * Constructs a new SupportApi. 
   * @alias module:api/SupportApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createChatUsingPost operation.
     * @callback module:api/SupportApi~createChatUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Chat
     * Create a Chat
     * @param {module:model/ChatInfo} chatInfoRequest chatInfoRequest
     * @param {module:api/SupportApi~createChatUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatInfo}
     */
    this.createChatUsingPost = function(chatInfoRequest, callback) {
      var postBody = chatInfoRequest;

      // verify the required parameter 'chatInfoRequest' is set
      if (chatInfoRequest === undefined || chatInfoRequest === null) {
        throw new Error("Missing the required parameter 'chatInfoRequest' when calling createChatUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ChatInfo;

      return this.apiClient.callApi(
        '/chat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createConsultationUsingPost operation.
     * @callback module:api/SupportApi~createConsultationUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Consultation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a CIO Consultation
     * Create a new CIO Consultation
     * @param {module:model/Consultation} cioConsultationRequest cioConsultationRequest
     * @param {module:api/SupportApi~createConsultationUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Consultation}
     */
    this.createConsultationUsingPost = function(cioConsultationRequest, callback) {
      var postBody = cioConsultationRequest;

      // verify the required parameter 'cioConsultationRequest' is set
      if (cioConsultationRequest === undefined || cioConsultationRequest === null) {
        throw new Error("Missing the required parameter 'cioConsultationRequest' when calling createConsultationUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Consultation;

      return this.apiClient.callApi(
        '/consultation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSaleUsingPost operation.
     * @callback module:api/SupportApi~createSaleUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a sales inquiry
     * Create a new sales inquiry for your firm.
     * @param {module:model/Sale} saleRequest saleRequest
     * @param {module:api/SupportApi~createSaleUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sale}
     */
    this.createSaleUsingPost = function(saleRequest, callback) {
      var postBody = saleRequest;

      // verify the required parameter 'saleRequest' is set
      if (saleRequest === undefined || saleRequest === null) {
        throw new Error("Missing the required parameter 'saleRequest' when calling createSaleUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Sale;

      return this.apiClient.callApi(
        '/sales', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSupportTicketCommentUsingPost operation.
     * @callback module:api/SupportApi~createSupportTicketCommentUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportTicket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a support ticket comment
     * Create a new support ticket comment for a support ticket.
     * @param {module:model/SupportTicketComment} supportTickerCommentRequest supportTickerCommentRequest
     * @param {module:api/SupportApi~createSupportTicketCommentUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportTicket}
     */
    this.createSupportTicketCommentUsingPost = function(supportTickerCommentRequest, callback) {
      var postBody = supportTickerCommentRequest;

      // verify the required parameter 'supportTickerCommentRequest' is set
      if (supportTickerCommentRequest === undefined || supportTickerCommentRequest === null) {
        throw new Error("Missing the required parameter 'supportTickerCommentRequest' when calling createSupportTicketCommentUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = SupportTicket;

      return this.apiClient.callApi(
        '/support_ticket_comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSupportTicketUsingPost operation.
     * @callback module:api/SupportApi~createSupportTicketUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportTicket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a support ticket
     * Create a new support ticket for your firm.
     * @param {module:model/SupportTicket} supportTicketRequest supportTicketRequest
     * @param {module:api/SupportApi~createSupportTicketUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportTicket}
     */
    this.createSupportTicketUsingPost = function(supportTicketRequest, callback) {
      var postBody = supportTicketRequest;

      // verify the required parameter 'supportTicketRequest' is set
      if (supportTicketRequest === undefined || supportTicketRequest === null) {
        throw new Error("Missing the required parameter 'supportTicketRequest' when calling createSupportTicketUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = SupportTicket;

      return this.apiClient.callApi(
        '/support_ticket', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChatUsingDelete operation.
     * @callback module:api/SupportApi~deleteChatUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Chat
     * Permanently delete a Chat
     * @param {String} chatId UUID chat_info_id
     * @param {module:api/SupportApi~deleteChatUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChatUsingDelete = function(chatId, callback) {
      var postBody = null;

      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling deleteChatUsingDelete");
      }


      var pathParams = {
        'chat_id': chatId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/chat/{chat_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConsultationUsingDelete operation.
     * @callback module:api/SupportApi~deleteConsultationUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a CIO Consultation
     * Permanently delete a CIO Consultation
     * @param {String} consultationId UUID consultation_id
     * @param {module:api/SupportApi~deleteConsultationUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteConsultationUsingDelete = function(consultationId, callback) {
      var postBody = null;

      // verify the required parameter 'consultationId' is set
      if (consultationId === undefined || consultationId === null) {
        throw new Error("Missing the required parameter 'consultationId' when calling deleteConsultationUsingDelete");
      }


      var pathParams = {
        'consultation_id': consultationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/consultation/{consultation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSaleUsingDelete operation.
     * @callback module:api/SupportApi~deleteSaleUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a sales inquiry
     * Permanently delete a sales inquiry.
     * @param {String} salesId UUID sales_id
     * @param {module:api/SupportApi~deleteSaleUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSaleUsingDelete = function(salesId, callback) {
      var postBody = null;

      // verify the required parameter 'salesId' is set
      if (salesId === undefined || salesId === null) {
        throw new Error("Missing the required parameter 'salesId' when calling deleteSaleUsingDelete");
      }


      var pathParams = {
        'sales_id': salesId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sales/{sales_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSupportTicketCommentUsingDelete operation.
     * @callback module:api/SupportApi~deleteSupportTicketCommentUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a support ticket comment
     * Permanently delete a support ticket comment for a support ticket.
     * @param {String} supportTicketCommentId UUID support_ticket_comment_id
     * @param {module:api/SupportApi~deleteSupportTicketCommentUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSupportTicketCommentUsingDelete = function(supportTicketCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'supportTicketCommentId' is set
      if (supportTicketCommentId === undefined || supportTicketCommentId === null) {
        throw new Error("Missing the required parameter 'supportTicketCommentId' when calling deleteSupportTicketCommentUsingDelete");
      }


      var pathParams = {
        'support_ticket_comment_id': supportTicketCommentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/support_ticket_comment/{support_ticket_comment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSupportTicketUsingDelete operation.
     * @callback module:api/SupportApi~deleteSupportTicketUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a support ticket
     * Permanently delete a support ticket for your firm.
     * @param {String} supportTicketId UUID support_ticket_id
     * @param {module:api/SupportApi~deleteSupportTicketUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSupportTicketUsingDelete = function(supportTicketId, callback) {
      var postBody = null;

      // verify the required parameter 'supportTicketId' is set
      if (supportTicketId === undefined || supportTicketId === null) {
        throw new Error("Missing the required parameter 'supportTicketId' when calling deleteSupportTicketUsingDelete");
      }


      var pathParams = {
        'support_ticket_id': supportTicketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/support_ticket/{support_ticket_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatAllUsingGet operation.
     * @callback module:api/SupportApi~getChatAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageChatInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all open chats
     * Get details for all open chat
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/SupportApi~getChatAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageChatInfo}
     */
    this.getChatAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageChatInfo;

      return this.apiClient.callApi(
        '/chat', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatUsingGet operation.
     * @callback module:api/SupportApi~getChatUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Chat
     * Retrieve the information for a Chat
     * @param {String} chatId UUID chat_info_id
     * @param {module:api/SupportApi~getChatUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatInfo}
     */
    this.getChatUsingGet = function(chatId, callback) {
      var postBody = null;

      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling getChatUsingGet");
      }


      var pathParams = {
        'chat_id': chatId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ChatInfo;

      return this.apiClient.callApi(
        '/chat/{chat_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsultationAllUsingGet operation.
     * @callback module:api/SupportApi~getConsultationAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageConsultation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all CIO Consultation
     * Get details for all CIO Consultation
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/SupportApi~getConsultationAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageConsultation}
     */
    this.getConsultationAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageConsultation;

      return this.apiClient.callApi(
        '/consultation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsultationUsingGet operation.
     * @callback module:api/SupportApi~getConsultationUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Consultation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a CIO Consultation
     * Retrieve the information for a CIO Consultation
     * @param {String} consultationId UUID consultation_id
     * @param {module:api/SupportApi~getConsultationUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Consultation}
     */
    this.getConsultationUsingGet = function(consultationId, callback) {
      var postBody = null;

      // verify the required parameter 'consultationId' is set
      if (consultationId === undefined || consultationId === null) {
        throw new Error("Missing the required parameter 'consultationId' when calling getConsultationUsingGet");
      }


      var pathParams = {
        'consultation_id': consultationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Consultation;

      return this.apiClient.callApi(
        '/consultation/{consultation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSaleAllUsingGet operation.
     * @callback module:api/SupportApi~getSaleAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageSale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all sales inquiries
     * Get all sales inquiries defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/SupportApi~getSaleAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageSale}
     */
    this.getSaleAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageSale;

      return this.apiClient.callApi(
        '/sales', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSaleUsingGet operation.
     * @callback module:api/SupportApi~getSaleUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a sales record
     * Retrieve the information for a sales record
     * @param {String} salesId UUID sales_id
     * @param {module:api/SupportApi~getSaleUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sale}
     */
    this.getSaleUsingGet = function(salesId, callback) {
      var postBody = null;

      // verify the required parameter 'salesId' is set
      if (salesId === undefined || salesId === null) {
        throw new Error("Missing the required parameter 'salesId' when calling getSaleUsingGet");
      }


      var pathParams = {
        'sales_id': salesId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Sale;

      return this.apiClient.callApi(
        '/sales/{sales_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportTicketAllUsingGet operation.
     * @callback module:api/SupportApi~getSupportTicketAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageSupportTicket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all support tickets
     * Get the information for all support tickets defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/SupportApi~getSupportTicketAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageSupportTicket}
     */
    this.getSupportTicketAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageSupportTicket;

      return this.apiClient.callApi(
        '/support_ticket', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportTicketCommentAllUsingGet operation.
     * @callback module:api/SupportApi~getSupportTicketCommentAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageSupportTicketComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all support ticket comments
     * Get the information for all support ticket comments defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/SupportApi~getSupportTicketCommentAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageSupportTicketComment}
     */
    this.getSupportTicketCommentAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageSupportTicketComment;

      return this.apiClient.callApi(
        '/support_ticket_comment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportTicketCommentUsingGet operation.
     * @callback module:api/SupportApi~getSupportTicketCommentUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportTicketComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a support ticket comment
     * Retrieve the information for a support ticket comment defined for a support ticket.
     * @param {String} supportTicketCommentId UUID support_ticket_comment_id
     * @param {module:api/SupportApi~getSupportTicketCommentUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportTicketComment}
     */
    this.getSupportTicketCommentUsingGet = function(supportTicketCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'supportTicketCommentId' is set
      if (supportTicketCommentId === undefined || supportTicketCommentId === null) {
        throw new Error("Missing the required parameter 'supportTicketCommentId' when calling getSupportTicketCommentUsingGet");
      }


      var pathParams = {
        'support_ticket_comment_id': supportTicketCommentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = SupportTicketComment;

      return this.apiClient.callApi(
        '/support_ticket_comment/{support_ticket_comment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportTicketUsingGet operation.
     * @callback module:api/SupportApi~getSupportTicketUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportTicket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a support ticket
     * Retrieve the information for a support ticket defined for your firm.
     * @param {String} supportTicketId UUID support_ticket_id
     * @param {module:api/SupportApi~getSupportTicketUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportTicket}
     */
    this.getSupportTicketUsingGet = function(supportTicketId, callback) {
      var postBody = null;

      // verify the required parameter 'supportTicketId' is set
      if (supportTicketId === undefined || supportTicketId === null) {
        throw new Error("Missing the required parameter 'supportTicketId' when calling getSupportTicketUsingGet");
      }


      var pathParams = {
        'support_ticket_id': supportTicketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = SupportTicket;

      return this.apiClient.callApi(
        '/support_ticket/{support_ticket_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChatUsingPut operation.
     * @callback module:api/SupportApi~updateChatUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Chat
     * Updated the information for a Chat
     * @param {String} chatId UUID chat_id
     * @param {module:model/ChatInfo} chatInfo chat_info
     * @param {module:api/SupportApi~updateChatUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatInfo}
     */
    this.updateChatUsingPut = function(chatId, chatInfo, callback) {
      var postBody = chatInfo;

      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling updateChatUsingPut");
      }

      // verify the required parameter 'chatInfo' is set
      if (chatInfo === undefined || chatInfo === null) {
        throw new Error("Missing the required parameter 'chatInfo' when calling updateChatUsingPut");
      }


      var pathParams = {
        'chat_id': chatId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ChatInfo;

      return this.apiClient.callApi(
        '/chat/{chat_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConsultationUsingPut operation.
     * @callback module:api/SupportApi~updateConsultationUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Consultation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a CIO Consultation
     * Updated the information CIO Consultation
     * @param {module:model/Consultation} consultation consultation
     * @param {String} consultationId UUID consultation_id
     * @param {module:api/SupportApi~updateConsultationUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Consultation}
     */
    this.updateConsultationUsingPut = function(consultation, consultationId, callback) {
      var postBody = consultation;

      // verify the required parameter 'consultation' is set
      if (consultation === undefined || consultation === null) {
        throw new Error("Missing the required parameter 'consultation' when calling updateConsultationUsingPut");
      }

      // verify the required parameter 'consultationId' is set
      if (consultationId === undefined || consultationId === null) {
        throw new Error("Missing the required parameter 'consultationId' when calling updateConsultationUsingPut");
      }


      var pathParams = {
        'consultation_id': consultationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Consultation;

      return this.apiClient.callApi(
        '/consultation/{consultation_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSaleUsingPut operation.
     * @callback module:api/SupportApi~updateSaleUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a sales inquiry
     * Update the information for a sales inquiry. 
     * @param {module:model/Sale} sales sales
     * @param {String} salesId UUID sales_id
     * @param {module:api/SupportApi~updateSaleUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sale}
     */
    this.updateSaleUsingPut = function(sales, salesId, callback) {
      var postBody = sales;

      // verify the required parameter 'sales' is set
      if (sales === undefined || sales === null) {
        throw new Error("Missing the required parameter 'sales' when calling updateSaleUsingPut");
      }

      // verify the required parameter 'salesId' is set
      if (salesId === undefined || salesId === null) {
        throw new Error("Missing the required parameter 'salesId' when calling updateSaleUsingPut");
      }


      var pathParams = {
        'sales_id': salesId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Sale;

      return this.apiClient.callApi(
        '/sales/{sales_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSupportTicketCommentUsingPut operation.
     * @callback module:api/SupportApi~updateSupportTicketCommentUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportTicketComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a support ticket comment
     * Update the information for a support ticket comments defined for a support ticket.
     * @param {module:model/SupportTicketComment} supportTicketComment support_ticket_comment
     * @param {String} supportTicketCommentId UUID support_ticket_comment_id
     * @param {module:api/SupportApi~updateSupportTicketCommentUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportTicketComment}
     */
    this.updateSupportTicketCommentUsingPut = function(supportTicketComment, supportTicketCommentId, callback) {
      var postBody = supportTicketComment;

      // verify the required parameter 'supportTicketComment' is set
      if (supportTicketComment === undefined || supportTicketComment === null) {
        throw new Error("Missing the required parameter 'supportTicketComment' when calling updateSupportTicketCommentUsingPut");
      }

      // verify the required parameter 'supportTicketCommentId' is set
      if (supportTicketCommentId === undefined || supportTicketCommentId === null) {
        throw new Error("Missing the required parameter 'supportTicketCommentId' when calling updateSupportTicketCommentUsingPut");
      }


      var pathParams = {
        'support_ticket_comment_id': supportTicketCommentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = SupportTicketComment;

      return this.apiClient.callApi(
        '/support_ticket_comment/{support_ticket_comment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSupportTicketUsingPut operation.
     * @callback module:api/SupportApi~updateSupportTicketUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportTicket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a support ticket
     * Update the information for a support ticket defined for your firm.
     * @param {module:model/SupportTicket} supportTicket support_ticket
     * @param {String} supportTicketId UUID support_ticket_id
     * @param {module:api/SupportApi~updateSupportTicketUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportTicket}
     */
    this.updateSupportTicketUsingPut = function(supportTicket, supportTicketId, callback) {
      var postBody = supportTicket;

      // verify the required parameter 'supportTicket' is set
      if (supportTicket === undefined || supportTicket === null) {
        throw new Error("Missing the required parameter 'supportTicket' when calling updateSupportTicketUsingPut");
      }

      // verify the required parameter 'supportTicketId' is set
      if (supportTicketId === undefined || supportTicketId === null) {
        throw new Error("Missing the required parameter 'supportTicketId' when calling updateSupportTicketUsingPut");
      }


      var pathParams = {
        'support_ticket_id': supportTicketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = SupportTicket;

      return this.apiClient.callApi(
        '/support_ticket/{support_ticket_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
