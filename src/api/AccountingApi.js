/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Accounting', 'model/PageAccounting'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Accounting'), require('../model/PageAccounting'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.AccountingApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.Accounting, root.HydrogenNucleusApi.PageAccounting);
  }
}(this, function(ApiClient, Accounting, PageAccounting) {
  'use strict';

  /**
   * Accounting service.
   * @module api/AccountingApi
   * @version 1.7.0
   */

  /**
   * Constructs a new AccountingApi. 
   * @alias module:api/AccountingApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAccountingUsingPost operation.
     * @callback module:api/AccountingApi~createAccountingUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an accounting
     * Store stats pulled from accounting vendors.
     * @param {module:model/Accounting} accounting accounting
     * @param {module:api/AccountingApi~createAccountingUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounting}
     */
    this.createAccountingUsingPost = function(accounting, callback) {
      var postBody = accounting;

      // verify the required parameter 'accounting' is set
      if (accounting === undefined || accounting === null) {
        throw new Error("Missing the required parameter 'accounting' when calling createAccountingUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Accounting;

      return this.apiClient.callApi(
        '/accounting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountingUsingDelete operation.
     * @callback module:api/AccountingApi~deleteAccountingUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an accounting
     * Permanently delete an accounting.
     * @param {String} accountingId UUID accounting_id
     * @param {module:api/AccountingApi~deleteAccountingUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountingUsingDelete = function(accountingId, callback) {
      var postBody = null;

      // verify the required parameter 'accountingId' is set
      if (accountingId === undefined || accountingId === null) {
        throw new Error("Missing the required parameter 'accountingId' when calling deleteAccountingUsingDelete");
      }


      var pathParams = {
        'accounting_id': accountingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounting/{accounting_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountingAllUsingGet operation.
     * @callback module:api/AccountingApi~getAccountingAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAccounting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all accounting
     * Get information for all accounting for all clients defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AccountingApi~getAccountingAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAccounting}
     */
    this.getAccountingAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAccounting;

      return this.apiClient.callApi(
        '/accounting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountingUsingGet operation.
     * @callback module:api/AccountingApi~getAccountingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an accounting
     * Retrieve the information for a specific accounting associated with a client.
     * @param {String} accountingId UUID accounting_id
     * @param {module:api/AccountingApi~getAccountingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounting}
     */
    this.getAccountingUsingGet = function(accountingId, callback) {
      var postBody = null;

      // verify the required parameter 'accountingId' is set
      if (accountingId === undefined || accountingId === null) {
        throw new Error("Missing the required parameter 'accountingId' when calling getAccountingUsingGet");
      }


      var pathParams = {
        'accounting_id': accountingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Accounting;

      return this.apiClient.callApi(
        '/accounting/{accounting_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountingUsingPut operation.
     * @callback module:api/AccountingApi~updateAccountingUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an accounting
     * Update the information for an accounting.
     * @param {module:model/Accounting} accounting accounting
     * @param {String} accountingId UUID accounting_id
     * @param {module:api/AccountingApi~updateAccountingUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounting}
     */
    this.updateAccountingUsingPut = function(accounting, accountingId, callback) {
      var postBody = accounting;

      // verify the required parameter 'accounting' is set
      if (accounting === undefined || accounting === null) {
        throw new Error("Missing the required parameter 'accounting' when calling updateAccountingUsingPut");
      }

      // verify the required parameter 'accountingId' is set
      if (accountingId === undefined || accountingId === null) {
        throw new Error("Missing the required parameter 'accountingId' when calling updateAccountingUsingPut");
      }


      var pathParams = {
        'accounting_id': accountingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Accounting;

      return this.apiClient.callApi(
        '/accounting/{accounting_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
