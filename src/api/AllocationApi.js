/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Allocation', 'model/AllocationAggregatedVO', 'model/AllocationComposition', 'model/DateDoubleVO', 'model/ModelHoldingAgg', 'model/PageAllocation', 'model/PageAllocationComposition', 'model/PageModelTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Allocation'), require('../model/AllocationAggregatedVO'), require('../model/AllocationComposition'), require('../model/DateDoubleVO'), require('../model/ModelHoldingAgg'), require('../model/PageAllocation'), require('../model/PageAllocationComposition'), require('../model/PageModelTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.AllocationApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.Allocation, root.HydrogenNucleusApi.AllocationAggregatedVO, root.HydrogenNucleusApi.AllocationComposition, root.HydrogenNucleusApi.DateDoubleVO, root.HydrogenNucleusApi.ModelHoldingAgg, root.HydrogenNucleusApi.PageAllocation, root.HydrogenNucleusApi.PageAllocationComposition, root.HydrogenNucleusApi.PageModelTransaction);
  }
}(this, function(ApiClient, Allocation, AllocationAggregatedVO, AllocationComposition, DateDoubleVO, ModelHoldingAgg, PageAllocation, PageAllocationComposition, PageModelTransaction) {
  'use strict';

  /**
   * Allocation service.
   * @module api/AllocationApi
   * @version 1.7.0
   */

  /**
   * Constructs a new AllocationApi. 
   * @alias module:api/AllocationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAllocationCompositionUsingPost operation.
     * @callback module:api/AllocationApi~createAllocationCompositionUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationComposition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an allocation composition
     * Create a new allocation composition record for an allocation.
     * @param {module:model/AllocationComposition} allocRequest allocRequest
     * @param {module:api/AllocationApi~createAllocationCompositionUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationComposition}
     */
    this.createAllocationCompositionUsingPost = function(allocRequest, callback) {
      var postBody = allocRequest;

      // verify the required parameter 'allocRequest' is set
      if (allocRequest === undefined || allocRequest === null) {
        throw new Error("Missing the required parameter 'allocRequest' when calling createAllocationCompositionUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AllocationComposition;

      return this.apiClient.callApi(
        '/allocation_composition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAllocationUsingPost operation.
     * @callback module:api/AllocationApi~createAllocationUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Allocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an allocation
     * Create a new allocation for your firm.
     * @param {module:model/Allocation} allocationRequest allocationRequest
     * @param {module:api/AllocationApi~createAllocationUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Allocation}
     */
    this.createAllocationUsingPost = function(allocationRequest, callback) {
      var postBody = allocationRequest;

      // verify the required parameter 'allocationRequest' is set
      if (allocationRequest === undefined || allocationRequest === null) {
        throw new Error("Missing the required parameter 'allocationRequest' when calling createAllocationUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Allocation;

      return this.apiClient.callApi(
        '/allocation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllocationCompositionUsingDelete operation.
     * @callback module:api/AllocationApi~deleteAllocationCompositionUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an allocation composition
     * Permanently delete an allocation composition record for an allocation.
     * @param {String} allocationCompositionId UUID allocation_composition_id
     * @param {module:api/AllocationApi~deleteAllocationCompositionUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAllocationCompositionUsingDelete = function(allocationCompositionId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationCompositionId' is set
      if (allocationCompositionId === undefined || allocationCompositionId === null) {
        throw new Error("Missing the required parameter 'allocationCompositionId' when calling deleteAllocationCompositionUsingDelete");
      }


      var pathParams = {
        'allocation_composition_id': allocationCompositionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/allocation_composition/{allocation_composition_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllocationUsingDelete operation.
     * @callback module:api/AllocationApi~deleteAllocationUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an allocation
     * Permanently delete an allocation defined by your firm.
     * @param {String} allocationId UUID allocation_id
     * @param {module:api/AllocationApi~deleteAllocationUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAllocationUsingDelete = function(allocationId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling deleteAllocationUsingDelete");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/allocation/{allocation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllHoldingsUsingGET operation.
     * @callback module:api/AllocationApi~getAllHoldingsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelHoldingAgg>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all allocation holdings
     * Get the information for all securities assigned to a specific allocation. 
     * @param {String} allocationId UUID allocation_id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endDate end_date (default to null)
     * @param {Date} opts.startDate start_date (default to null)
     * @param {module:api/AllocationApi~getAllHoldingsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelHoldingAgg>}
     */
    this.getAllHoldingsUsingGET = function(allocationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAllHoldingsUsingGET");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
        'end_date': opts['endDate'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [ModelHoldingAgg];

      return this.apiClient.callApi(
        '/allocation/{allocation_id}/holding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTransactionsUsingGET operation.
     * @callback module:api/AllocationApi~getAllTransactionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageModelTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all allocation transactions
     * Get the information for all transactions made under an allocation to achieve the composition of the allocation.
     * @param {String} allocationId UUID allocation_id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {Date} opts.endDate end_date (default to null)
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {Date} opts.startDate start_date (default to null)
     * @param {module:api/AllocationApi~getAllTransactionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageModelTransaction}
     */
    this.getAllTransactionsUsingGET = function(allocationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAllTransactionsUsingGET");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'end_date': opts['endDate'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageModelTransaction;

      return this.apiClient.callApi(
        '/allocation/{allocation_id}/transaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationAggregatedDataUsingGET operation.
     * @callback module:api/AllocationApi~getAllocationAggregatedDataUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationAggregatedVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Allocation aggregated data overview
     * @param {String} allocationId Allocation Id
     * @param {module:api/AllocationApi~getAllocationAggregatedDataUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationAggregatedVO}
     */
    this.getAllocationAggregatedDataUsingGET = function(allocationId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAllocationAggregatedDataUsingGET");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AllocationAggregatedVO;

      return this.apiClient.callApi(
        '/allocation/{allocation_id}/aggregate_data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationAllUsingGet operation.
     * @callback module:api/AllocationApi~getAllocationAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAllocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all allocations
     * Get details for all allocations defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AllocationApi~getAllocationAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAllocation}
     */
    this.getAllocationAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAllocation;

      return this.apiClient.callApi(
        '/allocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationCompositionAllUsingGet operation.
     * @callback module:api/AllocationApi~getAllocationCompositionAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAllocationComposition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all allocations compositions
     * Get the allocation composition for all allocations.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AllocationApi~getAllocationCompositionAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAllocationComposition}
     */
    this.getAllocationCompositionAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAllocationComposition;

      return this.apiClient.callApi(
        '/allocation_composition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationCompositionUsingGet operation.
     * @callback module:api/AllocationApi~getAllocationCompositionUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationComposition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an allocation composition
     * Retrieve the information of an allocation composition record for an allocation.
     * @param {String} allocationCompositionId UUID allocation_composition_id
     * @param {module:api/AllocationApi~getAllocationCompositionUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationComposition}
     */
    this.getAllocationCompositionUsingGet = function(allocationCompositionId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationCompositionId' is set
      if (allocationCompositionId === undefined || allocationCompositionId === null) {
        throw new Error("Missing the required parameter 'allocationCompositionId' when calling getAllocationCompositionUsingGet");
      }


      var pathParams = {
        'allocation_composition_id': allocationCompositionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AllocationComposition;

      return this.apiClient.callApi(
        '/allocation_composition/{allocation_composition_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationUsingGet operation.
     * @callback module:api/AllocationApi~getAllocationUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Allocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an allocation
     * Retrieve the information for an allocation defined by your firm.
     * @param {String} allocationId UUID allocation_id
     * @param {module:api/AllocationApi~getAllocationUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Allocation}
     */
    this.getAllocationUsingGet = function(allocationId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAllocationUsingGet");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Allocation;

      return this.apiClient.callApi(
        '/allocation/{allocation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetsizeUsingGET operation.
     * @callback module:api/AllocationApi~getAssetsizeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DateDoubleVO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all allocation asset sizes
     * Get a list of asset sizes by date for a specific allocation.
     * @param {String} allocationId UUID allocation_id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endDate end date
     * @param {Boolean} opts.getLatest get_latest
     * @param {Boolean} opts.isCurrentWeight is_current_weight (default to true)
     * @param {String} opts.sortType D (Daily), Q (quarterly), M (Monthly), Y (Annually) 
     * @param {Date} opts.startDate start date
     * @param {module:api/AllocationApi~getAssetsizeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DateDoubleVO>}
     */
    this.getAssetsizeUsingGET = function(allocationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAssetsizeUsingGET");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
        'end_date': opts['endDate'],
        'get_latest': opts['getLatest'],
        'is_current_weight': opts['isCurrentWeight'],
        'sort_type': opts['sortType'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [DateDoubleVO];

      return this.apiClient.callApi(
        '/allocation/{allocation_id}/asset_size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAllocationCompositionUsingPut operation.
     * @callback module:api/AllocationApi~updateAllocationCompositionUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationComposition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an allocation composition
     * Update the information of an allocation composition record for an allocation.
     * @param {module:model/AllocationComposition} allocationComposition aggregation_composition
     * @param {String} allocationCompositionId UUID allocation_composition_id
     * @param {module:api/AllocationApi~updateAllocationCompositionUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationComposition}
     */
    this.updateAllocationCompositionUsingPut = function(allocationComposition, allocationCompositionId, callback) {
      var postBody = allocationComposition;

      // verify the required parameter 'allocationComposition' is set
      if (allocationComposition === undefined || allocationComposition === null) {
        throw new Error("Missing the required parameter 'allocationComposition' when calling updateAllocationCompositionUsingPut");
      }

      // verify the required parameter 'allocationCompositionId' is set
      if (allocationCompositionId === undefined || allocationCompositionId === null) {
        throw new Error("Missing the required parameter 'allocationCompositionId' when calling updateAllocationCompositionUsingPut");
      }


      var pathParams = {
        'allocation_composition_id': allocationCompositionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AllocationComposition;

      return this.apiClient.callApi(
        '/allocation_composition/{allocation_composition_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAllocationUsingPut operation.
     * @callback module:api/AllocationApi~updateAllocationUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Allocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an allocation
     * Update an allocation defined by your firm.
     * @param {module:model/Allocation} allocation allocation
     * @param {String} allocationId UUID allocation_id
     * @param {module:api/AllocationApi~updateAllocationUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Allocation}
     */
    this.updateAllocationUsingPut = function(allocation, allocationId, callback) {
      var postBody = allocation;

      // verify the required parameter 'allocation' is set
      if (allocation === undefined || allocation === null) {
        throw new Error("Missing the required parameter 'allocation' when calling updateAllocationUsingPut");
      }

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling updateAllocationUsingPut");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Allocation;

      return this.apiClient.callApi(
        '/allocation/{allocation_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
