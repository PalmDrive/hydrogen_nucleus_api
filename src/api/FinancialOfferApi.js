/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FinancialOffer', 'model/PageFinancialOffer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FinancialOffer'), require('../model/PageFinancialOffer'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.FinancialOfferApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.FinancialOffer, root.HydrogenNucleusApi.PageFinancialOffer);
  }
}(this, function(ApiClient, FinancialOffer, PageFinancialOffer) {
  'use strict';

  /**
   * FinancialOffer service.
   * @module api/FinancialOfferApi
   * @version 1.7.0
   */

  /**
   * Constructs a new FinancialOfferApi. 
   * @alias module:api/FinancialOfferApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createFinancialOfferUsingPost operation.
     * @callback module:api/FinancialOfferApi~createFinancialOfferUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinancialOffer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a comparison request
     * Create a new comparison request.
     * @param {module:model/FinancialOffer} financialOffer financialOffer
     * @param {module:api/FinancialOfferApi~createFinancialOfferUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinancialOffer}
     */
    this.createFinancialOfferUsingPost = function(financialOffer, callback) {
      var postBody = financialOffer;

      // verify the required parameter 'financialOffer' is set
      if (financialOffer === undefined || financialOffer === null) {
        throw new Error("Missing the required parameter 'financialOffer' when calling createFinancialOfferUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = FinancialOffer;

      return this.apiClient.callApi(
        '/financial_offer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFinancialOfferUsingDelete operation.
     * @callback module:api/FinancialOfferApi~deleteFinancialOfferUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comparison request
     * Permanently delete a comparison request.
     * @param {String} financialOffer UUID financial_offer_id
     * @param {String} financialOfferId financial_offer_id
     * @param {module:api/FinancialOfferApi~deleteFinancialOfferUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFinancialOfferUsingDelete = function(financialOffer, financialOfferId, callback) {
      var postBody = null;

      // verify the required parameter 'financialOffer' is set
      if (financialOffer === undefined || financialOffer === null) {
        throw new Error("Missing the required parameter 'financialOffer' when calling deleteFinancialOfferUsingDelete");
      }

      // verify the required parameter 'financialOfferId' is set
      if (financialOfferId === undefined || financialOfferId === null) {
        throw new Error("Missing the required parameter 'financialOfferId' when calling deleteFinancialOfferUsingDelete");
      }


      var pathParams = {
        'financial_offer': financialOffer,
        'financial_offer_id': financialOfferId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/financial_offer/{financial_offer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinancialOfferAllUsingGet operation.
     * @callback module:api/FinancialOfferApi~getFinancialOfferAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageFinancialOffer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all comparison requests
     * Get the information for all comparison requests.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FinancialOfferApi~getFinancialOfferAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageFinancialOffer}
     */
    this.getFinancialOfferAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageFinancialOffer;

      return this.apiClient.callApi(
        '/financial_offer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinancialOfferUsingGet operation.
     * @callback module:api/FinancialOfferApi~getFinancialOfferUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinancialOffer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a comparison request
     * Retrieve the information for a comparison request.
     * @param {String} financialOffer UUID financial_offer_id
     * @param {String} financialOfferId financial_offer_id
     * @param {module:api/FinancialOfferApi~getFinancialOfferUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinancialOffer}
     */
    this.getFinancialOfferUsingGet = function(financialOffer, financialOfferId, callback) {
      var postBody = null;

      // verify the required parameter 'financialOffer' is set
      if (financialOffer === undefined || financialOffer === null) {
        throw new Error("Missing the required parameter 'financialOffer' when calling getFinancialOfferUsingGet");
      }

      // verify the required parameter 'financialOfferId' is set
      if (financialOfferId === undefined || financialOfferId === null) {
        throw new Error("Missing the required parameter 'financialOfferId' when calling getFinancialOfferUsingGet");
      }


      var pathParams = {
        'financial_offer': financialOffer,
        'financial_offer_id': financialOfferId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = FinancialOffer;

      return this.apiClient.callApi(
        '/financial_offer/{financial_offer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFinancialOfferUsingPut operation.
     * @callback module:api/FinancialOfferApi~updateFinancialOfferUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinancialOffer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a comparison request
     * Update the information for a comparison request.
     * @param {module:model/FinancialOffer} financialOffer financial_offer
     * @param {String} financialOfferId UUID financial_offer_id
     * @param {module:api/FinancialOfferApi~updateFinancialOfferUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinancialOffer}
     */
    this.updateFinancialOfferUsingPut = function(financialOffer, financialOfferId, callback) {
      var postBody = financialOffer;

      // verify the required parameter 'financialOffer' is set
      if (financialOffer === undefined || financialOffer === null) {
        throw new Error("Missing the required parameter 'financialOffer' when calling updateFinancialOfferUsingPut");
      }

      // verify the required parameter 'financialOfferId' is set
      if (financialOfferId === undefined || financialOfferId === null) {
        throw new Error("Missing the required parameter 'financialOfferId' when calling updateFinancialOfferUsingPut");
      }


      var pathParams = {
        'financial_offer_id': financialOfferId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = FinancialOffer;

      return this.apiClient.callApi(
        '/financial_offer/{financial_offer_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
