/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Invoice', 'model/InvoicePayment', 'model/PageInvoice', 'model/PageInvoicePayment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Invoice'), require('../model/InvoicePayment'), require('../model/PageInvoice'), require('../model/PageInvoicePayment'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.InvoiceApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.Invoice, root.HydrogenNucleusApi.InvoicePayment, root.HydrogenNucleusApi.PageInvoice, root.HydrogenNucleusApi.PageInvoicePayment);
  }
}(this, function(ApiClient, Invoice, InvoicePayment, PageInvoice, PageInvoicePayment) {
  'use strict';

  /**
   * Invoice service.
   * @module api/InvoiceApi
   * @version 1.7.0
   */

  /**
   * Constructs a new InvoiceApi. 
   * @alias module:api/InvoiceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createInvoicePaymentUsingPost operation.
     * @callback module:api/InvoiceApi~createInvoicePaymentUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoicePayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a invoicePayment
     * Create a new invoicePayment, for tracking invoice status.
     * @param {module:model/InvoicePayment} invoicePayment invoicePayment
     * @param {module:api/InvoiceApi~createInvoicePaymentUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoicePayment}
     */
    this.createInvoicePaymentUsingPost = function(invoicePayment, callback) {
      var postBody = invoicePayment;

      // verify the required parameter 'invoicePayment' is set
      if (invoicePayment === undefined || invoicePayment === null) {
        throw new Error("Missing the required parameter 'invoicePayment' when calling createInvoicePaymentUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = InvoicePayment;

      return this.apiClient.callApi(
        '/invoice_payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createInvoiceUsingPost operation.
     * @callback module:api/InvoiceApi~createInvoiceUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a invoice
     * Create a new invoice, with your firm.
     * @param {module:model/Invoice} invoice invoice
     * @param {module:api/InvoiceApi~createInvoiceUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoice}
     */
    this.createInvoiceUsingPost = function(invoice, callback) {
      var postBody = invoice;

      // verify the required parameter 'invoice' is set
      if (invoice === undefined || invoice === null) {
        throw new Error("Missing the required parameter 'invoice' when calling createInvoiceUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Invoice;

      return this.apiClient.callApi(
        '/invoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInvoicePaymentUsingDelete operation.
     * @callback module:api/InvoiceApi~deleteInvoicePaymentUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a invoicePayment
     * Delete a invoicePayment. 
     * @param {String} invoicePaymentId UUID invoice_payment_id
     * @param {module:api/InvoiceApi~deleteInvoicePaymentUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteInvoicePaymentUsingDelete = function(invoicePaymentId, callback) {
      var postBody = null;

      // verify the required parameter 'invoicePaymentId' is set
      if (invoicePaymentId === undefined || invoicePaymentId === null) {
        throw new Error("Missing the required parameter 'invoicePaymentId' when calling deleteInvoicePaymentUsingDelete");
      }


      var pathParams = {
        'invoice_payment_id': invoicePaymentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/invoice_payment/{invoice_payment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInvoiceUsingDelete operation.
     * @callback module:api/InvoiceApi~deleteInvoiceUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a invoice
     * Delete a invoice. 
     * @param {String} invoiceId UUID invoice_id
     * @param {module:api/InvoiceApi~deleteInvoiceUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteInvoiceUsingDelete = function(invoiceId, callback) {
      var postBody = null;

      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling deleteInvoiceUsingDelete");
      }


      var pathParams = {
        'invoice_id': invoiceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/invoice/{invoice_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoiceAllUsingGet operation.
     * @callback module:api/InvoiceApi~getInvoiceAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all invoice
     * List all invoice. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/InvoiceApi~getInvoiceAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageInvoice}
     */
    this.getInvoiceAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageInvoice;

      return this.apiClient.callApi(
        '/invoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoicePaymentAllUsingGet operation.
     * @callback module:api/InvoiceApi~getInvoicePaymentAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageInvoicePayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all invoicePayment
     * List all invoicePayment. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/InvoiceApi~getInvoicePaymentAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageInvoicePayment}
     */
    this.getInvoicePaymentAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageInvoicePayment;

      return this.apiClient.callApi(
        '/invoice_payment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoicePaymentUsingGet operation.
     * @callback module:api/InvoiceApi~getInvoicePaymentUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoicePayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a invoicePayment
     * Retrieve a invoicePayment. 
     * @param {String} invoicePaymentId UUID invoice_payment_id
     * @param {module:api/InvoiceApi~getInvoicePaymentUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoicePayment}
     */
    this.getInvoicePaymentUsingGet = function(invoicePaymentId, callback) {
      var postBody = null;

      // verify the required parameter 'invoicePaymentId' is set
      if (invoicePaymentId === undefined || invoicePaymentId === null) {
        throw new Error("Missing the required parameter 'invoicePaymentId' when calling getInvoicePaymentUsingGet");
      }


      var pathParams = {
        'invoice_payment_id': invoicePaymentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = InvoicePayment;

      return this.apiClient.callApi(
        '/invoice_payment/{invoice_payment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoiceUsingGet operation.
     * @callback module:api/InvoiceApi~getInvoiceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a invoice
     * Retrieve a invoice. 
     * @param {String} invoiceId UUID invoice_idd
     * @param {module:api/InvoiceApi~getInvoiceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoice}
     */
    this.getInvoiceUsingGet = function(invoiceId, callback) {
      var postBody = null;

      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getInvoiceUsingGet");
      }


      var pathParams = {
        'invoice_id': invoiceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Invoice;

      return this.apiClient.callApi(
        '/invoice/{invoice_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInvoicePaymentUsingPut operation.
     * @callback module:api/InvoiceApi~updateInvoicePaymentUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoicePayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a invoicePayment
     * Update a invoicePayment. 
     * @param {module:model/InvoicePayment} invoicePayment invoice_payment
     * @param {String} invoicePaymentId UUID invoice_payment_id
     * @param {module:api/InvoiceApi~updateInvoicePaymentUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoicePayment}
     */
    this.updateInvoicePaymentUsingPut = function(invoicePayment, invoicePaymentId, callback) {
      var postBody = invoicePayment;

      // verify the required parameter 'invoicePayment' is set
      if (invoicePayment === undefined || invoicePayment === null) {
        throw new Error("Missing the required parameter 'invoicePayment' when calling updateInvoicePaymentUsingPut");
      }

      // verify the required parameter 'invoicePaymentId' is set
      if (invoicePaymentId === undefined || invoicePaymentId === null) {
        throw new Error("Missing the required parameter 'invoicePaymentId' when calling updateInvoicePaymentUsingPut");
      }


      var pathParams = {
        'invoice_payment_id': invoicePaymentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = InvoicePayment;

      return this.apiClient.callApi(
        '/invoice_payment/{invoice_payment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInvoiceUsingPut operation.
     * @callback module:api/InvoiceApi~updateInvoiceUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a invoice
     * Update a invoice. 
     * @param {module:model/Invoice} invoice invoice
     * @param {String} invoiceId UUID invoice_id
     * @param {module:api/InvoiceApi~updateInvoiceUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoice}
     */
    this.updateInvoiceUsingPut = function(invoice, invoiceId, callback) {
      var postBody = invoice;

      // verify the required parameter 'invoice' is set
      if (invoice === undefined || invoice === null) {
        throw new Error("Missing the required parameter 'invoice' when calling updateInvoiceUsingPut");
      }

      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling updateInvoiceUsingPut");
      }


      var pathParams = {
        'invoice_id': invoiceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Invoice;

      return this.apiClient.callApi(
        '/invoice/{invoice_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
