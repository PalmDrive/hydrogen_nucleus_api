/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.7.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BankLink', 'model/DailyDeposit', 'model/DailyWithdrawal', 'model/ExternalAccountTransfer', 'model/Funding', 'model/PageBankLink', 'model/PageDailyDeposit', 'model/PageDailyWithdrawal', 'model/PageExternalAccountTransfer', 'model/PageFunding'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BankLink'), require('../model/DailyDeposit'), require('../model/DailyWithdrawal'), require('../model/ExternalAccountTransfer'), require('../model/Funding'), require('../model/PageBankLink'), require('../model/PageDailyDeposit'), require('../model/PageDailyWithdrawal'), require('../model/PageExternalAccountTransfer'), require('../model/PageFunding'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.FundingApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.BankLink, root.HydrogenNucleusApi.DailyDeposit, root.HydrogenNucleusApi.DailyWithdrawal, root.HydrogenNucleusApi.ExternalAccountTransfer, root.HydrogenNucleusApi.Funding, root.HydrogenNucleusApi.PageBankLink, root.HydrogenNucleusApi.PageDailyDeposit, root.HydrogenNucleusApi.PageDailyWithdrawal, root.HydrogenNucleusApi.PageExternalAccountTransfer, root.HydrogenNucleusApi.PageFunding);
  }
}(this, function(ApiClient, BankLink, DailyDeposit, DailyWithdrawal, ExternalAccountTransfer, Funding, PageBankLink, PageDailyDeposit, PageDailyWithdrawal, PageExternalAccountTransfer, PageFunding) {
  'use strict';

  /**
   * Funding service.
   * @module api/FundingApi
   * @version 1.7.0
   */

  /**
   * Constructs a new FundingApi. 
   * @alias module:api/FundingApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createBankLinkUsingPost operation.
     * @callback module:api/FundingApi~createBankLinkUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bank link
     * Create a new bank link for an account.
     * @param {module:model/BankLink} bankLinkInfoRequest bankLinkInfoRequest
     * @param {module:api/FundingApi~createBankLinkUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankLink}
     */
    this.createBankLinkUsingPost = function(bankLinkInfoRequest, callback) {
      var postBody = bankLinkInfoRequest;

      // verify the required parameter 'bankLinkInfoRequest' is set
      if (bankLinkInfoRequest === undefined || bankLinkInfoRequest === null) {
        throw new Error("Missing the required parameter 'bankLinkInfoRequest' when calling createBankLinkUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BankLink;

      return this.apiClient.callApi(
        '/bank_link', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDepositUsingPost operation.
     * @callback module:api/FundingApi~createDepositUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DailyDeposit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deposit request
     * Create a new deposit request for an account.
     * @param {module:model/DailyDeposit} dailyDepositRequest dailyDepositRequest
     * @param {module:api/FundingApi~createDepositUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DailyDeposit}
     */
    this.createDepositUsingPost = function(dailyDepositRequest, callback) {
      var postBody = dailyDepositRequest;

      // verify the required parameter 'dailyDepositRequest' is set
      if (dailyDepositRequest === undefined || dailyDepositRequest === null) {
        throw new Error("Missing the required parameter 'dailyDepositRequest' when calling createDepositUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DailyDeposit;

      return this.apiClient.callApi(
        '/deposit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFundingUsingPost operation.
     * @callback module:api/FundingApi~createFundingUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Funding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a funding request
     * Create a new funding request for an account. 
     * @param {module:model/Funding} fundingRequest fundingRequest
     * @param {module:api/FundingApi~createFundingUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Funding}
     */
    this.createFundingUsingPost = function(fundingRequest, callback) {
      var postBody = fundingRequest;

      // verify the required parameter 'fundingRequest' is set
      if (fundingRequest === undefined || fundingRequest === null) {
        throw new Error("Missing the required parameter 'fundingRequest' when calling createFundingUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Funding;

      return this.apiClient.callApi(
        '/funding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTransferUsingPost operation.
     * @callback module:api/FundingApi~createTransferUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transfer requests
     * Create a new external account transfer for a client account.
     * @param {module:model/ExternalAccountTransfer} externalAccountTransferRequest externalAccountTransferRequest
     * @param {module:api/FundingApi~createTransferUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccountTransfer}
     */
    this.createTransferUsingPost = function(externalAccountTransferRequest, callback) {
      var postBody = externalAccountTransferRequest;

      // verify the required parameter 'externalAccountTransferRequest' is set
      if (externalAccountTransferRequest === undefined || externalAccountTransferRequest === null) {
        throw new Error("Missing the required parameter 'externalAccountTransferRequest' when calling createTransferUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ExternalAccountTransfer;

      return this.apiClient.callApi(
        '/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createWithdrawalUsingPost operation.
     * @callback module:api/FundingApi~createWithdrawalUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DailyWithdrawal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a withdrawal request
     * Create a new withdrawal request for an account.
     * @param {module:model/DailyWithdrawal} dailyWithdrawalRequest dailyWithdrawalRequest
     * @param {module:api/FundingApi~createWithdrawalUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DailyWithdrawal}
     */
    this.createWithdrawalUsingPost = function(dailyWithdrawalRequest, callback) {
      var postBody = dailyWithdrawalRequest;

      // verify the required parameter 'dailyWithdrawalRequest' is set
      if (dailyWithdrawalRequest === undefined || dailyWithdrawalRequest === null) {
        throw new Error("Missing the required parameter 'dailyWithdrawalRequest' when calling createWithdrawalUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DailyWithdrawal;

      return this.apiClient.callApi(
        '/withdrawal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankLinkUsingDelete operation.
     * @callback module:api/FundingApi~deleteBankLinkUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a bank link
     * Permanently delete a bank link defined for an account.
     * @param {String} bankLinkId UUID bank_link_id
     * @param {module:api/FundingApi~deleteBankLinkUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBankLinkUsingDelete = function(bankLinkId, callback) {
      var postBody = null;

      // verify the required parameter 'bankLinkId' is set
      if (bankLinkId === undefined || bankLinkId === null) {
        throw new Error("Missing the required parameter 'bankLinkId' when calling deleteBankLinkUsingDelete");
      }


      var pathParams = {
        'bank_link_id': bankLinkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bank_link/{bank_link_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDepositUsingDelete operation.
     * @callback module:api/FundingApi~deleteDepositUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a deposit request
     * Permanently delete a deposit request for an account.
     * @param {String} depositId UUID deposit_id
     * @param {module:api/FundingApi~deleteDepositUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDepositUsingDelete = function(depositId, callback) {
      var postBody = null;

      // verify the required parameter 'depositId' is set
      if (depositId === undefined || depositId === null) {
        throw new Error("Missing the required parameter 'depositId' when calling deleteDepositUsingDelete");
      }


      var pathParams = {
        'deposit_id': depositId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deposit/{deposit_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFundingUsingDelete operation.
     * @callback module:api/FundingApi~deleteFundingUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a funding request
     * Permanently delete a funding request defined for an account.
     * @param {String} fundingId UUID funding_id
     * @param {module:api/FundingApi~deleteFundingUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFundingUsingDelete = function(fundingId, callback) {
      var postBody = null;

      // verify the required parameter 'fundingId' is set
      if (fundingId === undefined || fundingId === null) {
        throw new Error("Missing the required parameter 'fundingId' when calling deleteFundingUsingDelete");
      }


      var pathParams = {
        'funding_id': fundingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/funding/{funding_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransferUsingDelete operation.
     * @callback module:api/FundingApi~deleteTransferUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transfer request
     * Permanently delete a external account transfer from a client account.
     * @param {String} transfer UUID external_account_transfer_id
     * @param {String} transferId transfer_id
     * @param {module:api/FundingApi~deleteTransferUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTransferUsingDelete = function(transfer, transferId, callback) {
      var postBody = null;

      // verify the required parameter 'transfer' is set
      if (transfer === undefined || transfer === null) {
        throw new Error("Missing the required parameter 'transfer' when calling deleteTransferUsingDelete");
      }

      // verify the required parameter 'transferId' is set
      if (transferId === undefined || transferId === null) {
        throw new Error("Missing the required parameter 'transferId' when calling deleteTransferUsingDelete");
      }


      var pathParams = {
        'transfer': transfer,
        'transfer_id': transferId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/transfer/{transfer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWithdrawalUsingDelete operation.
     * @callback module:api/FundingApi~deleteWithdrawalUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a withdrawal request
     * Permanently delete a withdrawal request from an account.
     * @param {String} withdrawalId UUID withdrawal_id
     * @param {module:api/FundingApi~deleteWithdrawalUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteWithdrawalUsingDelete = function(withdrawalId, callback) {
      var postBody = null;

      // verify the required parameter 'withdrawalId' is set
      if (withdrawalId === undefined || withdrawalId === null) {
        throw new Error("Missing the required parameter 'withdrawalId' when calling deleteWithdrawalUsingDelete");
      }


      var pathParams = {
        'withdrawal_id': withdrawalId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/withdrawal/{withdrawal_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankLinkAllUsingGet operation.
     * @callback module:api/FundingApi~getBankLinkAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBankLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all bank links
     * Get all bank links defined for all clients defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FundingApi~getBankLinkAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBankLink}
     */
    this.getBankLinkAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageBankLink;

      return this.apiClient.callApi(
        '/bank_link', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankLinkUsingGet operation.
     * @callback module:api/FundingApi~getBankLinkUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a bank link
     * Retrieve the information for a bank link for an account.
     * @param {String} bankLinkId UUID bank_link_id
     * @param {module:api/FundingApi~getBankLinkUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankLink}
     */
    this.getBankLinkUsingGet = function(bankLinkId, callback) {
      var postBody = null;

      // verify the required parameter 'bankLinkId' is set
      if (bankLinkId === undefined || bankLinkId === null) {
        throw new Error("Missing the required parameter 'bankLinkId' when calling getBankLinkUsingGet");
      }


      var pathParams = {
        'bank_link_id': bankLinkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BankLink;

      return this.apiClient.callApi(
        '/bank_link/{bank_link_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepositAllUsingGet operation.
     * @callback module:api/FundingApi~getDepositAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageDailyDeposit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all deposit requests
     * Get the information for all deposit requests for all clients.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FundingApi~getDepositAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageDailyDeposit}
     */
    this.getDepositAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageDailyDeposit;

      return this.apiClient.callApi(
        '/deposit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepositUsingGet operation.
     * @callback module:api/FundingApi~getDepositUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DailyDeposit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a deposit request
     * Retrieve the information for a deposit request for an account.
     * @param {String} depositId UUID deposit_id
     * @param {module:api/FundingApi~getDepositUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DailyDeposit}
     */
    this.getDepositUsingGet = function(depositId, callback) {
      var postBody = null;

      // verify the required parameter 'depositId' is set
      if (depositId === undefined || depositId === null) {
        throw new Error("Missing the required parameter 'depositId' when calling getDepositUsingGet");
      }


      var pathParams = {
        'deposit_id': depositId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = DailyDeposit;

      return this.apiClient.callApi(
        '/deposit/{deposit_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingAllUsingGet operation.
     * @callback module:api/FundingApi~getFundingAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageFunding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all funding requests 
     * Get the information for all funding requests defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FundingApi~getFundingAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageFunding}
     */
    this.getFundingAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageFunding;

      return this.apiClient.callApi(
        '/funding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingUsingGet operation.
     * @callback module:api/FundingApi~getFundingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Funding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a funding request
     * Retrieve the information for a funding request for an account.
     * @param {String} fundingId UUID funding_id
     * @param {module:api/FundingApi~getFundingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Funding}
     */
    this.getFundingUsingGet = function(fundingId, callback) {
      var postBody = null;

      // verify the required parameter 'fundingId' is set
      if (fundingId === undefined || fundingId === null) {
        throw new Error("Missing the required parameter 'fundingId' when calling getFundingUsingGet");
      }


      var pathParams = {
        'funding_id': fundingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Funding;

      return this.apiClient.callApi(
        '/funding/{funding_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferAllUsingGet operation.
     * @callback module:api/FundingApi~getTransferAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageExternalAccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all transfer requests
     * Get the information for all external account transfers defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FundingApi~getTransferAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageExternalAccountTransfer}
     */
    this.getTransferAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageExternalAccountTransfer;

      return this.apiClient.callApi(
        '/transfer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferUsingGet operation.
     * @callback module:api/FundingApi~getTransferUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a transfer request
     * Retrieve the information for a external account transfer for an account.
     * @param {String} externalAccountTransferId UUID external_account_transfer_id
     * @param {String} transferId transfer_id
     * @param {module:api/FundingApi~getTransferUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccountTransfer}
     */
    this.getTransferUsingGet = function(externalAccountTransferId, transferId, callback) {
      var postBody = null;

      // verify the required parameter 'externalAccountTransferId' is set
      if (externalAccountTransferId === undefined || externalAccountTransferId === null) {
        throw new Error("Missing the required parameter 'externalAccountTransferId' when calling getTransferUsingGet");
      }

      // verify the required parameter 'transferId' is set
      if (transferId === undefined || transferId === null) {
        throw new Error("Missing the required parameter 'transferId' when calling getTransferUsingGet");
      }


      var pathParams = {
        'external_account_transfer_id': externalAccountTransferId,
        'transfer_id': transferId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ExternalAccountTransfer;

      return this.apiClient.callApi(
        '/transfer/{transfer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWithdrawalAllUsingGet operation.
     * @callback module:api/FundingApi~getWithdrawalAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageDailyWithdrawal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all withdrawal requests
     * Get the information for all withdrawal requests for all clients.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FundingApi~getWithdrawalAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageDailyWithdrawal}
     */
    this.getWithdrawalAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageDailyWithdrawal;

      return this.apiClient.callApi(
        '/withdrawal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWithdrawalUsingGet operation.
     * @callback module:api/FundingApi~getWithdrawalUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DailyWithdrawal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a withdrawal request
     * Retrieve the information for a withdrawal request for an account.
     * @param {String} withdrawalId UUID withdrawal_id
     * @param {module:api/FundingApi~getWithdrawalUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DailyWithdrawal}
     */
    this.getWithdrawalUsingGet = function(withdrawalId, callback) {
      var postBody = null;

      // verify the required parameter 'withdrawalId' is set
      if (withdrawalId === undefined || withdrawalId === null) {
        throw new Error("Missing the required parameter 'withdrawalId' when calling getWithdrawalUsingGet");
      }


      var pathParams = {
        'withdrawal_id': withdrawalId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = DailyWithdrawal;

      return this.apiClient.callApi(
        '/withdrawal/{withdrawal_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankLinkBulkUsingPut operation.
     * @callback module:api/FundingApi~updateBankLinkBulkUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BankLink>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update list of bank link
     * Update bank link list for an account.
     * @param {Array.<module:model/BankLink>} bankLinkList bankLinkList
     * @param {module:api/FundingApi~updateBankLinkBulkUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BankLink>}
     */
    this.updateBankLinkBulkUsingPut = function(bankLinkList, callback) {
      var postBody = bankLinkList;

      // verify the required parameter 'bankLinkList' is set
      if (bankLinkList === undefined || bankLinkList === null) {
        throw new Error("Missing the required parameter 'bankLinkList' when calling updateBankLinkBulkUsingPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [BankLink];

      return this.apiClient.callApi(
        '/bulk_bank_link', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankLinkUsingPut operation.
     * @callback module:api/FundingApi~updateBankLinkUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a bank link
     * Update the information for a bank link for an account.
     * @param {module:model/BankLink} bankLink bank_link
     * @param {String} bankLinkId UUID bank_link_id
     * @param {module:api/FundingApi~updateBankLinkUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankLink}
     */
    this.updateBankLinkUsingPut = function(bankLink, bankLinkId, callback) {
      var postBody = bankLink;

      // verify the required parameter 'bankLink' is set
      if (bankLink === undefined || bankLink === null) {
        throw new Error("Missing the required parameter 'bankLink' when calling updateBankLinkUsingPut");
      }

      // verify the required parameter 'bankLinkId' is set
      if (bankLinkId === undefined || bankLinkId === null) {
        throw new Error("Missing the required parameter 'bankLinkId' when calling updateBankLinkUsingPut");
      }


      var pathParams = {
        'bank_link_id': bankLinkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BankLink;

      return this.apiClient.callApi(
        '/bank_link/{bank_link_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDepositUsingPut operation.
     * @callback module:api/FundingApi~updateDepositUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DailyDeposit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a deposit request
     * Update the information for a deposit request for an account.
     * @param {module:model/DailyDeposit} deposit deposit
     * @param {String} depositId UUID deposit_id
     * @param {module:api/FundingApi~updateDepositUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DailyDeposit}
     */
    this.updateDepositUsingPut = function(deposit, depositId, callback) {
      var postBody = deposit;

      // verify the required parameter 'deposit' is set
      if (deposit === undefined || deposit === null) {
        throw new Error("Missing the required parameter 'deposit' when calling updateDepositUsingPut");
      }

      // verify the required parameter 'depositId' is set
      if (depositId === undefined || depositId === null) {
        throw new Error("Missing the required parameter 'depositId' when calling updateDepositUsingPut");
      }


      var pathParams = {
        'deposit_id': depositId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DailyDeposit;

      return this.apiClient.callApi(
        '/deposit/{deposit_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFundingUsingPut operation.
     * @callback module:api/FundingApi~updateFundingUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Funding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a funding request
     * Update the information for a funding request for an account.
     * @param {module:model/Funding} funding funding
     * @param {String} fundingId UUID funding_id
     * @param {module:api/FundingApi~updateFundingUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Funding}
     */
    this.updateFundingUsingPut = function(funding, fundingId, callback) {
      var postBody = funding;

      // verify the required parameter 'funding' is set
      if (funding === undefined || funding === null) {
        throw new Error("Missing the required parameter 'funding' when calling updateFundingUsingPut");
      }

      // verify the required parameter 'fundingId' is set
      if (fundingId === undefined || fundingId === null) {
        throw new Error("Missing the required parameter 'fundingId' when calling updateFundingUsingPut");
      }


      var pathParams = {
        'funding_id': fundingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Funding;

      return this.apiClient.callApi(
        '/funding/{funding_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransferUsingPut operation.
     * @callback module:api/FundingApi~updateTransferUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a transfer request
     * Update the information for a external account transfer for a client account. 
     * @param {module:model/ExternalAccountTransfer} transfer transfer
     * @param {String} transferId UUID external_account_transfer_id
     * @param {module:api/FundingApi~updateTransferUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccountTransfer}
     */
    this.updateTransferUsingPut = function(transfer, transferId, callback) {
      var postBody = transfer;

      // verify the required parameter 'transfer' is set
      if (transfer === undefined || transfer === null) {
        throw new Error("Missing the required parameter 'transfer' when calling updateTransferUsingPut");
      }

      // verify the required parameter 'transferId' is set
      if (transferId === undefined || transferId === null) {
        throw new Error("Missing the required parameter 'transferId' when calling updateTransferUsingPut");
      }


      var pathParams = {
        'transfer_id': transferId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ExternalAccountTransfer;

      return this.apiClient.callApi(
        '/transfer/{transfer_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWithdrawalUsingPut operation.
     * @callback module:api/FundingApi~updateWithdrawalUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DailyWithdrawal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a withdrawal request
     * Update the information for a withdrawal request for an account.
     * @param {module:model/DailyWithdrawal} withdrawal withdrawal
     * @param {String} withdrawalId UUID withdrawal_id
     * @param {module:api/FundingApi~updateWithdrawalUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DailyWithdrawal}
     */
    this.updateWithdrawalUsingPut = function(withdrawal, withdrawalId, callback) {
      var postBody = withdrawal;

      // verify the required parameter 'withdrawal' is set
      if (withdrawal === undefined || withdrawal === null) {
        throw new Error("Missing the required parameter 'withdrawal' when calling updateWithdrawalUsingPut");
      }

      // verify the required parameter 'withdrawalId' is set
      if (withdrawalId === undefined || withdrawalId === null) {
        throw new Error("Missing the required parameter 'withdrawalId' when calling updateWithdrawalUsingPut");
      }


      var pathParams = {
        'withdrawal_id': withdrawalId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DailyWithdrawal;

      return this.apiClient.callApi(
        '/withdrawal/{withdrawal_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
